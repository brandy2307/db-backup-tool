{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2024-06-02T14:40:56+00:00",
  "name": "DB Backup Tool (Auto-Update)",
  "author": "admin@example.com",
  "uuid": "db9f372e-01d7-4c9b-a109-e49990d68d46",
  "description": "Automatisches Datenbank-Backup-Tool mit Web-Interface für MySQL, PostgreSQL und MongoDB. Unterstützt Auto-Updates von GitHub.",
  "features": null,
  "docker_images": {
    "ghcr.io/parkervcp/yolks:nodejs_18": "ghcr.io/parkervcp/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "cd /home/container/db-backup-tool && npm start",
  "config": {
    "files": "{\r\n    \"db-backup-tool/config.json\": {\r\n        \"parser\": \"json\",\r\n        \"find\": {\r\n            \"server.port\": \"{{server.build.default.port}}\",\r\n            \"server.host\": \"0.0.0.0\"\r\n        }\r\n    }\r\n}",
    "startup": "{\r\n    \"done\": \"Server läuft auf Port\"\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\n# DB Backup Tool Installation Script mit Auto-Update\n# Erweiterte Version mit besserer Fehlerbehandlung\n\ndeclare -r DIR=\"/mnt/server\"\ndeclare -r APP_DIR=\"${DIR}/db-backup-tool\"\ndeclare -r GITHUB_REPO=\"{{GITHUB_REPOSITORY}}\"\ndeclare -r BRANCH=\"{{GITHUB_BRANCH}}\"\n\n# Farben für bessere Ausgabe\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nlog_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\ndie() {\n    log_error \"$1\"\n    exit 1\n}\n\n# Validiere Repository URL\nvalidate_repo_url() {\n    log_info \"Validating repository URL: ${GITHUB_REPO}\"\n    \n    if [[ ! \"${GITHUB_REPO}\" =~ ^https://github.com/.+/.+\\.git$ ]]; then\n        die \"Invalid repository URL format. Expected: https://github.com/username/repo.git\"\n    fi\n    \n    # Test repository accessibility\n    if ! git ls-remote --heads \"${GITHUB_REPO}\" >/dev/null 2>&1; then\n        die \"Repository is not accessible. Please check: 1) Repository exists 2) Repository is public 3) URL is correct\"\n    fi\n    \n    log_success \"Repository URL is valid and accessible\"\n}\n\n# Installiere System-Dependencies\ninstall_system_deps() {\n    log_info \"Installing system dependencies...\"\n    \n    # Update package list\n    apt update || die \"Failed to update package list\"\n    \n    # Install basic tools\n    apt install -y wget curl gnupg2 software-properties-common git || die \"Failed to install basic tools\"\n    \n    # Install Node.js 18.x\n    log_info \"Installing Node.js 18.x...\"\n    curl -fsSL https://deb.nodesource.com/setup_18.x | bash - || die \"Failed to setup Node.js repository\"\n    apt install -y nodejs || die \"Failed to install Node.js\"\n    \n    # Install database clients\n    log_info \"Installing database clients...\"\n    apt install -y mysql-client || apt install -y default-mysql-client || log_warning \"MySQL client installation failed\"\n    apt install -y postgresql-client || apt install -y postgresql-client-common || log_warning \"PostgreSQL client installation failed\"\n    \n    # Install MongoDB tools\n    log_info \"Installing MongoDB tools...\"\n    curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg\n    echo \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/debian bookworm/mongodb-org/7.0 main\" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n    apt update\n    apt install -y mongodb-database-tools || log_warning \"MongoDB tools installation failed\"\n    \n    log_success \"System dependencies installed\"\n}\n\n# Verifikation der Installationen\nverify_tools() {\n    log_info \"Verifying installed tools...\"\n    \n    # Check Node.js\n    if command -v node >/dev/null 2>&1; then\n        log_success \"Node.js: $(node --version)\"\n    else\n        die \"Node.js installation failed\"\n    fi\n    \n    # Check NPM\n    if command -v npm >/dev/null 2>&1; then\n        log_success \"NPM: $(npm --version)\"\n    else\n        die \"NPM installation failed\"\n    fi\n    \n    # Check Git\n    if command -v git >/dev/null 2>&1; then\n        log_success \"Git: $(git --version)\"\n    else\n        die \"Git installation failed\"\n    fi\n    \n    # Check database tools\n    command -v mysqldump >/dev/null 2>&1 && log_success \"mysqldump: OK\" || log_warning \"mysqldump: NOT FOUND\"\n    command -v pg_dump >/dev/null 2>&1 && log_success \"pg_dump: OK\" || log_warning \"pg_dump: NOT FOUND\"\n    command -v mongodump >/dev/null 2>&1 && log_success \"mongodump: OK\" || log_warning \"mongodump: NOT FOUND\"\n}\n\n# Repository klonen oder updaten\nsetup_repository() {\n    log_info \"Setting up repository...\"\n    \n    cd \"${DIR}\" || die \"Failed to change to ${DIR}\"\n    \n    # Cleanup old installation\n    if [ -d \"${APP_DIR}\" ]; then\n        log_info \"Removing old installation...\"\n        rm -rf \"${APP_DIR}\"\n    fi\n    \n    # Clone repository\n    log_info \"Cloning repository: ${GITHUB_REPO}\"\n    log_info \"Branch: ${BRANCH}\"\n    \n    if ! git clone -b \"${BRANCH}\" \"${GITHUB_REPO}\" \"${APP_DIR}\"; then\n        die \"Failed to clone repository. Please check: 1) Repository exists 2) Branch '${BRANCH}' exists 3) Repository is public\"\n    fi\n    \n    cd \"${APP_DIR}\" || die \"Failed to change to app directory\"\n    \n    log_success \"Repository cloned successfully\"\n}\n\n# Überprüfe erforderliche Dateien\nverify_required_files() {\n    log_info \"Verifying required files...\"\n    \n    local required_files=(\"server.js\" \"package.json\")\n    \n    for file in \"${required_files[@]}\"; do\n        if [ ! -f \"${file}\" ]; then\n            die \"Required file '${file}' not found in repository!\"\n        fi\n        log_success \"Found: ${file}\"\n    done\n    \n    # Check if package.json is valid\n    if ! node -e \"JSON.parse(require('fs').readFileSync('package.json', 'utf8'))\" 2>/dev/null; then\n        die \"package.json is not valid JSON\"\n    fi\n    \n    log_success \"All required files are present and valid\"\n}\n\n# Installiere Node.js Dependencies\ninstall_node_deps() {\n    log_info \"Installing Node.js dependencies...\"\n    \n    # Clear npm cache\n    npm cache clean --force || log_warning \"Failed to clear npm cache\"\n    \n    # Install dependencies\n    if ! npm install --production; then\n        log_error \"NPM install failed, trying with legacy-peer-deps...\"\n        if ! npm install --production --legacy-peer-deps; then\n            die \"Failed to install Node.js dependencies\"\n        fi\n    fi\n    \n    log_success \"Node.js dependencies installed\"\n}\n\n# Erstelle Verzeichnisse und Dateien\nsetup_app_structure() {\n    log_info \"Setting up application structure...\"\n    \n    # Create directories\n    mkdir -p backups logs config public\n    \n    # Create config.json if it doesn't exist\n    if [ ! -f \"config.json\" ]; then\n        log_info \"Creating default config.json...\"\n        cat > config.json << 'EOF'\n{\n  \"server\": {\n    \"port\": 8080,\n    \"host\": \"0.0.0.0\"\n  },\n  \"security\": {\n    \"sessionSecret\": \"change-this-secret-key-in-production\",\n    \"jwtSecret\": \"change-this-jwt-secret-in-production\",\n    \"defaultAdmin\": {\n      \"username\": \"admin\",\n      \"password\": \"admin123\"\n    }\n  },\n  \"backup\": {\n    \"defaultPath\": \"./backups\",\n    \"maxBackups\": 10,\n    \"compression\": true\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"file\": \"./logs/app.log\"\n  },\n  \"updates\": {\n    \"autoUpdate\": true,\n    \"repository\": \"{{GITHUB_REPOSITORY}}\",\n    \"branch\": \"{{GITHUB_BRANCH}}\"\n  }\n}\nEOF\n        log_success \"Default config.json created\"\n    else\n        log_info \"config.json already exists, updating auto-update settings...\"\n        # Update existing config with auto-update settings\n        node -e \"\n            const fs = require('fs');\n            try {\n                const config = JSON.parse(fs.readFileSync('config.json', 'utf8'));\n                config.updates = config.updates || {};\n                config.updates.autoUpdate = true;\n                config.updates.repository = '{{GITHUB_REPOSITORY}}';\n                config.updates.branch = '{{GITHUB_BRANCH}}';\n                fs.writeFileSync('config.json', JSON.stringify(config, null, 2));\n                console.log('Config updated successfully');\n            } catch (e) {\n                console.error('Error updating config:', e.message);\n                process.exit(1);\n            }\n        \" || die \"Failed to update config.json\"\n    fi\n    \n    # Create update script\n    log_info \"Creating update script...\"\n    cat > update.sh << 'EOF'\n#!/bin/bash\n# Auto-Update Script für DB Backup Tool\n\necho \"🔄 Checking for updates...\"\n\n# Backup current config\nif [ -f \"config.json\" ]; then\n    cp config.json config.json.backup\n    echo \"📋 Config backed up\"\nfi\n\n# Backup schedules if they exist\nif [ -f \"backups/schedules.json\" ]; then\n    cp backups/schedules.json backups/schedules.json.backup\n    echo \"📋 Schedules backed up\"\nfi\n\n# Check if we're in a git repository\nif [ ! -d \".git\" ]; then\n    echo \"❌ Not a git repository, skipping update\"\n    exit 0\nfi\n\n# Fetch latest changes\ngit fetch origin\n\n# Check if update is available\nLOCAL=$(git rev-parse HEAD)\nREMOTE=$(git rev-parse origin/{{GITHUB_BRANCH}})\n\nif [ \"$LOCAL\" = \"$REMOTE\" ]; then\n    echo \"✅ Already up to date\"\nelse\n    echo \"🔄 Update available, updating...\"\n    \n    # Update code\n    git reset --hard origin/{{GITHUB_BRANCH}}\n    \n    # Update dependencies\n    npm install --production\n    \n    # Create directories if they don't exist\n    mkdir -p backups logs config public\n    \n    # Restore config\n    if [ -f \"config.json.backup\" ]; then\n        mv config.json.backup config.json\n        echo \"📋 Config restored\"\n    fi\n    \n    # Restore schedules\n    if [ -f \"backups/schedules.json.backup\" ]; then\n        mv backups/schedules.json.backup backups/schedules.json\n        echo \"📋 Schedules restored\"\n    fi\n    \n    echo \"✅ Update completed successfully\"\nfi\nEOF\n    \n    chmod +x update.sh\n    \n    # Create empty schedules.json if it doesn't exist\n    if [ ! -f \"backups/schedules.json\" ]; then\n        echo \"[]\" > backups/schedules.json\n        log_success \"Empty schedules.json created\"\n    fi\n    \n    # Create .gitattributes if it doesn't exist\n    if [ ! -f \".gitattributes\" ]; then\n        cat > .gitattributes << 'EOF'\n# Auto detect text files and perform LF normalization\n* text=auto\nEOF\n        log_success \".gitattributes created\"\n    fi\n    \n    # Set correct permissions\n    chmod 755 .\n    chmod 644 config.json 2>/dev/null || true\n    chmod 644 package.json 2>/dev/null || true\n    chmod 644 server.js 2>/dev/null || true\n    chmod 755 backups logs config 2>/dev/null || true\n    \n    log_success \"Application structure setup complete\"\n}\n\n# Teste die Anwendung\ntest_application() {\n    log_info \"Testing application...\"\n    \n    # Test if server.js can be loaded\n    if ! timeout 5s node -e \"console.log('Testing server.js...'); require('./server.js')\" 2>/dev/null; then\n        log_warning \"Application test completed (timeout is normal during installation)\"\n    else\n        log_success \"Application test passed\"\n    fi\n}\n\n# Finale Verifikation\nfinal_verification() {\n    log_info \"Final verification...\"\n    \n    echo \"==============================\"\n    echo \"INSTALLATION VERIFICATION\"\n    echo \"==============================\"\n    echo \"Working Directory: $(pwd)\"\n    echo \"Node.js: $(node --version)\"\n    echo \"NPM: $(npm --version)\"\n    echo \"Git: $(git --version)\"\n    echo \"Repository: $(git remote get-url origin 2>/dev/null || echo 'N/A')\"\n    echo \"Branch: $(git branch --show-current 2>/dev/null || echo 'N/A')\"\n    echo \"==============================\"\n    echo \"FILES AND DIRECTORIES:\"\n    ls -la\n    echo \"==============================\"\n    echo \"CONFIG FILES:\"\n    ls -la config.json backups/schedules.json 2>/dev/null || echo \"Some config files missing\"\n    echo \"==============================\"\n    echo \"DATABASE TOOLS:\"\n    echo \"mysqldump: $(which mysqldump 2>/dev/null || echo 'NOT FOUND')\"\n    echo \"pg_dump: $(which pg_dump 2>/dev/null || echo 'NOT FOUND')\"\n    echo \"mongodump: $(which mongodump 2>/dev/null || echo 'NOT FOUND')\"\n    echo \"==============================\"\n    \n    # Final check\n    if [ ! -f \"package.json\" ] || [ ! -f \"server.js\" ] || [ ! -f \"config.json\" ]; then\n        die \"Installation incomplete - missing required files\"\n    fi\n    \n    log_success \"Installation verification completed\"\n}\n\n# Hauptfunktion\nmain() {\n    log_info \"Starting DB Backup Tool installation...\"\n    log_info \"Repository: ${GITHUB_REPO}\"\n    log_info \"Branch: ${BRANCH}\"\n    \n    validate_repo_url\n    install_system_deps\n    verify_tools\n    setup_repository\n    verify_required_files\n    install_node_deps\n    setup_app_structure\n    test_application\n    final_verification\n    \n    echo \"\"\n    log_success \"🎉 INSTALLATION COMPLETE!\"\n    echo \"\"\n    echo \"🔧 Auto-Update Configuration:\"\n    echo \"   Repository: ${GITHUB_REPO}\"\n    echo \"   Branch: ${BRANCH}\"\n    echo \"\"\n    echo \"🔐 Default Login:\"\n    echo \"   Username: admin\"\n    echo \"   Password: admin123\"\n    echo \"\"\n    echo \"⚠️  IMPORTANT: Change default passwords after first login!\"\n    echo \"\"\n    echo \"📝 Update Methods:\"\n    echo \"   - Automatic: On server restart\"\n    echo \"   - Manual: ./update.sh\"\n    echo \"   - Web Interface: System Tab -> Manual Update\"\n    echo \"\"\n    echo \"🚀 Server will start automatically...\"\n}\n\nmain",
      "container": "debian:bookworm-slim",
      "entrypoint": "bash"
    }
  },
  "variables": [
    {
      "name": "GitHub Repository",
      "description": "GitHub Repository URL (z.B. https://github.com/username/repo.git)",
      "env_variable": "GITHUB_REPOSITORY",
      "default_value": "https://github.com/DEIN-USERNAME/db-backup-tool.git",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:10",
      "sort": 1,
      "field_type": "text"
    },
    {
      "name": "GitHub Branch",
      "description": "Branch für Updates (normalerweise main oder master)",
      "env_variable": "GITHUB_BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:1",
      "sort": 2,
      "field_type": "text"
    },
    {
      "name": "Auto-Update aktivieren",
      "description": "Automatische Updates bei Serverstart",
      "env_variable": "AUTO_UPDATE",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 3,
      "field_type": "text"
    },
    {
      "name": "Node Environment",
      "description": "Node.js Umgebung (production oder development)",
      "env_variable": "NODE_ENV",
      "default_value": "production",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:production,development",
      "sort": 4,
      "field_type": "text"
    },
    {
      "name": "Default Admin Username",
      "description": "Standard Admin Benutzername",
      "env_variable": "ADMIN_USERNAME",
      "default_value": "admin",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:3|max:20",
      "sort": 5,
      "field_type": "text"
    },
    {
      "name": "Default Admin Password",
      "description": "Standard Admin Passwort (bitte nach dem ersten Login ändern!)",
      "env_variable": "ADMIN_PASSWORD",
      "default_value": "admin123",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:6",
      "sort": 6,
      "field_type": "text"
    },
    {
      "name": "Session Secret",
      "description": "Geheimer Schlüssel für Sessions",
      "env_variable": "SESSION_SECRET",
      "default_value": "change-this-secret-key-in-production",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 7,
      "field_type": "text"
    },
    {
      "name": "JWT Secret",
      "description": "Geheimer Schlüssel für JWT Tokens",
      "env_variable": "JWT_SECRET",
      "default_value": "change-this-jwt-secret-in-production",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 8,
      "field_type": "text"
    },
    {
      "name": "Max Backups",
      "description": "Maximale Anzahl von Backups die gespeichert werden sollen",
      "env_variable": "MAX_BACKUPS",
      "default_value": "10",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:100",
      "sort": 9,
      "field_type": "text"
    },
    {
      "name": "Enable Compression",
      "description": "Backup-Komprimierung aktivieren",
      "env_variable": "ENABLE_COMPRESSION",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 10,
      "field_type": "text"
    }
  ]
}
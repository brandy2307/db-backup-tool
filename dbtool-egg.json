{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
  "meta": {
    "version": "PTDL_v2",
    "update_url": "https://github.com/brandy2307/db-backup-tool/blob/main/dbtool-egg.json"
  },
  "exported_at": "2024-12-15T20:30:00+00:00",
  "name": "DB Backup Tool (Enhanced SSL Debug)",
  "author": "brandy@example.com",
  "uuid": "db9f372e-01d7-4c9b-a109-e49990d68d46",
  "description": "Sicheres automatisiertes Datenbank-Backup-Tool mit erweiterten SSL-Debugging-Funktionen und Browser-Kompatibilität",
  "features": [
    "eula=false"
  ],
  "docker_images": {
    "ghcr.io/parkervcp/yolks:nodejs_18": "ghcr.io/parkervcp/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "cd /home/container && if [ ! -f \"db-backup-tool/package.json\" ]; then echo \"ERROR: package.json not found. Please reinstall the server.\"; exit 1; fi && cd db-backup-tool && npm start",
  "config": {
    "files": "{\r\n    \"db-backup-tool/config.json\": {\r\n        \"parser\": \"json\",\r\n        \"find\": {\r\n            \"server.port\": \"{{server.build.default.port}}\",\r\n            \"server.httpsPort\": \"{{env.HTTPS_PORT}}\",\r\n            \"server.host\": \"0.0.0.0\",\r\n            \"security.requireHttps\": \"{{env.REQUIRE_HTTPS}}\",\r\n            \"security.enable2FA\": \"{{env.ENABLE_2FA}}\",\r\n            \"security.strongPasswords\": \"{{env.STRONG_PASSWORDS}}\",\r\n            \"security.maxFailedAttempts\": \"{{env.MAX_FAILED_ATTEMPTS}}\",\r\n            \"security.defaultAdmin.username\": \"{{env.ADMIN_USERNAME}}\",\r\n            \"security.defaultAdmin.password\": \"{{env.ADMIN_PASSWORD}}\",\r\n            \"security.sessionSecret\": \"{{env.SESSION_SECRET}}\",\r\n            \"security.jwtSecret\": \"{{env.JWT_SECRET}}\",\r\n            \"ssl.domain\": \"{{env.SSL_DOMAIN}}\",\r\n            \"ssl.email\": \"{{env.SSL_EMAIL}}\",\r\n            \"ssl.method\": \"{{env.SSL_METHOD}}\",\r\n            \"ssl.autoRenewal\": \"{{env.SSL_AUTO_RENEWAL}}\",\r\n            \"ssl.keySize\": \"{{env.SSL_KEY_SIZE}}\",\r\n            \"ssl.certValidity\": \"{{env.SSL_CERT_VALIDITY}}\",\r\n            \"ssl.setupOnStart\": \"{{env.SSL_SETUP_ON_START}}\",\r\n            \"backup.maxBackups\": \"{{env.MAX_BACKUPS}}\",\r\n            \"backup.compression\": \"{{env.ENABLE_COMPRESSION}}\",\r\n            \"gitBackup.enabled\": \"{{env.GIT_BACKUP_ENABLED}}\",\r\n            \"gitBackup.repository\": \"{{env.GIT_BACKUP_REPOSITORY}}\",\r\n            \"gitBackup.username\": \"{{env.GIT_BACKUP_USERNAME}}\",\r\n            \"gitBackup.branch\": \"{{env.GIT_BACKUP_BRANCH}}\",\r\n            \"updates.autoUpdate\": \"{{env.AUTO_UPDATE}}\"\r\n        }\r\n    }\r\n}",
    "startup": "{\r\n    \"done\": \"Server läuft auf\"\r\n}",
    "logs": "{}",
    "stop": "^C"
  }
  ,
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\n# Enhanced Database Backup Tool Installation mit vollständigem SSL-Debugging\n\nset -e\n\ndeclare -r DIR=\"/mnt/server\"\ndeclare -r APP_DIR=\"${DIR}/db-backup-tool\"\n\n# Fest definiertes Repository\nREPO_URL=\"https://github.com/brandy2307/db-backup-tool.git\"\nREPO_BRANCH=\"main\"\n\necho \"=================================================\"\necho \"DB BACKUP TOOL INSTALLATION (ENHANCED SSL DEBUG)\"\necho \"=================================================\"\necho \"Repository: ${REPO_URL}\"\necho \"Branch: ${REPO_BRANCH}\"\necho \"Target: ${APP_DIR}\"\necho \"Features: Enhanced SSL-Debugging + Browser-Fixed\"\necho \"=================================================\"\n\n# System Dependencies\necho \"[1/8] Installing system dependencies...\"\napt update\napt install -y wget curl gnupg2 software-properties-common git openssl ca-certificates lsb-release netstat-nat\n\n# Node.js\necho \"[2/8] Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | bash -\napt install -y nodejs\n\n# Database Tools\necho \"[3/8] Installing database tools...\"\napt install -y mysql-client || echo \"MySQL client optional\"\napt install -y postgresql-client || echo \"PostgreSQL client optional\"\napt install -y mongodb-database-tools || echo \"MongoDB tools optional\"\n\n# SSL Tools (erweitert für Debugging)\necho \"[4/8] Installing enhanced SSL tools...\"\napt install -y certbot python3-certbot-nginx python3-certbot-apache || echo \"Certbot installation failed - will use self-signed\"\napt install -y openssl ca-certificates\napt install -y net-tools dnsutils || echo \"Network tools optional\"\n\n# Git Setup\necho \"[5/8] Configuring Git...\"\ngit config --global init.defaultBranch main\ngit config --global user.name \"DB Backup Tool\"\ngit config --global user.email \"backup@localhost\"\n\n# Repository Clone\necho \"[6/8] Cloning repository...\"\ncd \"${DIR}\"\nrm -rf \"${APP_DIR}\" 2>/dev/null || true\ngit clone -b \"${REPO_BRANCH}\" \"${REPO_URL}\" \"${APP_DIR}\"\ncd \"${APP_DIR}\"\n\n# Dependencies\necho \"[7/8] Installing dependencies...\"\nnpm cache clean --force\nnpm install --production --no-audit --no-fund\n\n# Directory Setup\necho \"Creating directories...\"\nmkdir -p backups logs config public ssl\nchmod 700 ssl\nchmod 755 backups logs config public\n\n# Enhanced SSL Setup Script mit vollständigem Debug-Support\necho \"[8/8] Setting up enhanced SSL with comprehensive debugging...\"\n\n# SSL-Setup Script erstellen (FIXED - ohne Here-Document Probleme)\ncat > ssl-setup-simple.sh << 'ENHANCED_SSL_EOF'\n#!/bin/bash\n# Enhanced SSL-Setup Script für Docker Container mit vollständigem Debugging\n# Version: Enhanced Debug 2.0 - SYNTAX FIXED\nset -e\n\n# Debug-Konfiguration aus Umgebungsvariablen\nDEBUG=\"${SSL_DEBUG:-false}\"\nVERBOSE=\"${SSL_VERBOSE:-false}\"\nSSL_DOMAIN=\"${SSL_DOMAIN:-localhost}\"\nSSL_EMAIL=\"${SSL_EMAIL:-admin@localhost}\"\nSSL_METHOD=\"${SSL_METHOD:-selfsigned}\"\nSSL_KEY_SIZE=\"${SSL_KEY_SIZE:-4096}\"\nSSL_CERT_VALIDITY=\"${SSL_CERT_VALIDITY:-365}\"\nLETS_ENCRYPT_PORT=\"${LETS_ENCRYPT_PORT:-80}\"\nFORCE_DOMAIN_VALIDATION=\"${FORCE_DOMAIN_VALIDATION:-false}\"\nCLOUDFLARE_API_TOKEN=\"${CLOUDFLARE_API_TOKEN:-}\"\n\n# Farben für Output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nCYAN='\\033[0;36m'\nMAGENTA='\\033[0;35m'\nNC='\\033[0m'\n\n# Enhanced Logging-Funktionen\nlog_info() { \n    echo -e \"${BLUE}[INFO]${NC} $@\"\n    if [ \"$DEBUG\" = \"true\" ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S'): [INFO] $@\" >> ssl/ssl-debug.log\n    fi\n}\n\nlog_error() { \n    echo -e \"${RED}[ERROR]${NC} $@\" >&2\n    if [ \"$DEBUG\" = \"true\" ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S'): [ERROR] $@\" >> ssl/ssl-debug.log\n    fi\n}\n\nlog_warn() { \n    echo -e \"${YELLOW}[WARN]${NC} $@\"\n    if [ \"$DEBUG\" = \"true\" ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S'): [WARN] $@\" >> ssl/ssl-debug.log\n    fi\n}\n\nlog_debug() {\n    if [ \"$DEBUG\" = \"true\" ]; then\n        echo -e \"${CYAN}[DEBUG]${NC} $@\"\n        echo \"$(date '+%Y-%m-%d %H:%M:%S'): [DEBUG] $@\" >> ssl/ssl-debug.log\n    fi\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $@\"\n    if [ \"$DEBUG\" = \"true\" ]; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S'): [SUCCESS] $@\" >> ssl/ssl-debug.log\n    fi\n}\n\necho -e \"${MAGENTA}🔐 Enhanced SSL-Setup für ${SSL_DOMAIN} (Methode: ${SSL_METHOD})${NC}\"\necho \"Debug-Modus: ${DEBUG}, Verbose: ${VERBOSE}\"\necho \"Let's Encrypt Port: ${LETS_ENCRYPT_PORT}\"\necho \"Version: Enhanced Debug 2.0 - SYNTAX FIXED\"\n\n# SSL-Verzeichnis vorbereiten\nmkdir -p ssl\nchmod 700 ssl\ntouch ssl/ssl-debug.log\n\n# Debug-Informationen sammeln\nif [ \"$DEBUG\" = \"true\" ]; then\n    log_debug \"=== SYSTEM DEBUG INFORMATIONEN ===\"\n    log_debug \"Hostname: $(hostname)\"\n    log_debug \"User: $(whoami)\"\n    log_debug \"UID: $(id -u)\"\n    log_debug \"Working Dir: $(pwd)\"\n    log_debug \"Container ID: $(cat /proc/self/cgroup | grep docker | head -1 | cut -d'/' -f3 | cut -c1-12 2>/dev/null || echo 'Nicht in Docker')\"\n    log_debug \"SSL_DOMAIN: '${SSL_DOMAIN}'\"\n    log_debug \"SSL_METHOD: '${SSL_METHOD}'\"\n    log_debug \"SSL_EMAIL: '${SSL_EMAIL}'\"\n    log_debug \"LETS_ENCRYPT_PORT: '${LETS_ENCRYPT_PORT}'\"\n    log_debug \"CLOUDFLARE_API_TOKEN: '${CLOUDFLARE_API_TOKEN:+GESETZT (${#CLOUDFLARE_API_TOKEN} Zeichen)}${CLOUDFLARE_API_TOKEN:-NICHT GESETZT}'\"\n    \n    log_debug \"=== NETZWERK STATUS ===\"\n    if command -v netstat >/dev/null 2>&1; then\n        netstat -tlnp 2>/dev/null | grep -E \":80|:443|:8080|:8443|:9090\" | while read line; do\n            log_debug \"Port: $line\"\n        done\n    elif command -v ss >/dev/null 2>&1; then\n        ss -tlnp 2>/dev/null | grep -E \":80|:443|:8080|:8443|:9090\" | while read line; do\n            log_debug \"Port: $line\"\n        done\n    else\n        log_debug \"Keine Port-Scanning Tools verfügbar\"\n    fi\n    \n    log_debug \"=== DNS STATUS ===\"\n    if command -v nslookup >/dev/null 2>&1; then\n        nslookup \"$SSL_DOMAIN\" 2>&1 | while read line; do\n            log_debug \"DNS: $line\"\n        done\n    fi\n    \n    log_debug \"=== VERFÜGBARE TOOLS ===\"\n    for tool in openssl curl wget git certbot; do\n        if command -v \"$tool\" >/dev/null 2>&1; then\n            local version=$(\"$tool\" --version 2>&1 | head -1 || echo \"Version unbekannt\")\n            log_debug \"$tool: ✅ ($version)\"\n        else\n            log_debug \"$tool: ❌ Nicht verfügbar\"\n        fi\n    done\nfi\n\n# Funktion: OpenSSL Config erstellen (ohne Here-Document Problem)\ncreate_openssl_config() {\n    local config_file=\"$1\"\n    local domain=\"$2\"\n    \n    echo \"[req]\" > \"$config_file\"\n    echo \"distinguished_name = req_distinguished_name\" >> \"$config_file\"\n    echo \"req_extensions = v3_req\" >> \"$config_file\"\n    echo \"prompt = no\" >> \"$config_file\"\n    echo \"x509_extensions = v3_ca\" >> \"$config_file\"\n    echo \"\" >> \"$config_file\"\n    echo \"[req_distinguished_name]\" >> \"$config_file\"\n    echo \"C = DE\" >> \"$config_file\"\n    echo \"ST = NRW\" >> \"$config_file\"\n    echo \"L = Docker\" >> \"$config_file\"\n    echo \"O = DB Backup Tool Enhanced\" >> \"$config_file\"\n    echo \"CN = $domain\" >> \"$config_file\"\n    echo \"\" >> \"$config_file\"\n    echo \"[v3_req]\" >> \"$config_file\"\n    echo \"basicConstraints = CA:FALSE\" >> \"$config_file\"\n    echo \"keyUsage = nonRepudiation, digitalSignature, keyEncipherment\" >> \"$config_file\"\n    echo \"extendedKeyUsage = serverAuth, clientAuth\" >> \"$config_file\"\n    echo \"subjectAltName = @alt_names\" >> \"$config_file\"\n    echo \"\" >> \"$config_file\"\n    echo \"[v3_ca]\" >> \"$config_file\"\n    echo \"basicConstraints = CA:FALSE\" >> \"$config_file\"\n    echo \"keyUsage = nonRepudiation, digitalSignature, keyEncipherment\" >> \"$config_file\"\n    echo \"extendedKeyUsage = serverAuth, clientAuth\" >> \"$config_file\"\n    echo \"subjectAltName = @alt_names\" >> \"$config_file\"\n    echo \"\" >> \"$config_file\"\n    echo \"[alt_names]\" >> \"$config_file\"\n    echo \"DNS.1 = $domain\" >> \"$config_file\"\n    echo \"DNS.2 = localhost\" >> \"$config_file\"\n    echo \"DNS.3 = *.$domain\" >> \"$config_file\"\n    echo \"IP.1 = 127.0.0.1\" >> \"$config_file\"\n    echo \"IP.2 = ::1\" >> \"$config_file\"\n}\n\n# SSL-Methoden-Implementierung mit erweiterten Details\nif [ \"${SSL_METHOD}\" = \"selfsigned\" ]; then\n    log_info \"🔄 Erstelle Enhanced Self-Signed Zertifikat...\"\n    \n    # Enhanced OpenSSL Config für Browser-Kompatibilität\n    create_openssl_config \"ssl/openssl.cnf\" \"$SSL_DOMAIN\"\n    \n    if [ \"$DEBUG\" = \"true\" ]; then\n        log_debug \"OpenSSL Config erstellt:\"\n        cat ssl/openssl.cnf | while read line; do\n            log_debug \"Config: $line\"\n        done\n    fi\n    \n    # Zertifikat erstellen mit Enhanced KeyUsage\n    log_info \"Führe OpenSSL-Befehl aus...\"\n    if openssl req -x509 -newkey rsa:${SSL_KEY_SIZE} \\\n        -keyout ssl/privkey.pem \\\n        -out ssl/fullchain.pem \\\n        -days ${SSL_CERT_VALIDITY} \\\n        -nodes \\\n        -config ssl/openssl.cnf \\\n        -extensions v3_ca 2>&1 | while read line; do\n            log_debug \"OpenSSL: $line\"\n        done; then\n        log_success \"✅ OpenSSL-Befehl erfolgreich\"\n    else\n        log_error \"❌ OpenSSL-Befehl fehlgeschlagen\"\n        exit 1\n    fi\n    \n    rm -f ssl/openssl.cnf\n    \n    # Validierung\n    if openssl x509 -in ssl/fullchain.pem -text -noout | grep -q \"digitalSignature\"; then\n        log_success \"✅ Enhanced SSL-Zertifikat mit korrekter KeyUsage erstellt\"\n        log_success \"🌐 Browser-Kompatibilität: ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\n    else\n        log_warn \"⚠️ KeyUsage möglicherweise nicht optimal\"\n    fi\n    \nelif [ \"${SSL_METHOD}\" = \"letsencrypt\" ]; then\n    log_info \"🌐 Let's Encrypt Setup mit erweiterten Debug-Informationen...\"\n    \n    # Kritische Validierungen für Let's Encrypt\n    log_debug \"=== LET'S ENCRYPT VALIDIERUNGEN ===\"\n    \n    # 1. Domain-Typ prüfen\n    if [ \"$SSL_DOMAIN\" = \"localhost\" ] || [[ \"$SSL_DOMAIN\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n        log_error \"❌ KRITISCHER FEHLER: Let's Encrypt funktioniert nicht mit localhost/IP-Adressen\"\n        log_error \"Domain: $SSL_DOMAIN ist nicht für Let's Encrypt geeignet\"\n        log_error \"💡 LÖSUNG: Verwende eine echte Domain oder setze SSL_METHOD=selfsigned\"\n        \n        # Automatisches Fallback zu Self-Signed\n        log_warn \"🔄 Automatisches Fallback zu Self-Signed Zertifikat...\"\n        export SSL_METHOD=\"selfsigned\"\n        exec \"$0\"\n        exit 0\n    fi\n    log_debug \"✅ Domain-Format ist gültig für Let's Encrypt: $SSL_DOMAIN\"\n    \n    # 2. DNS-Validierung\n    if command -v nslookup >/dev/null 2>&1; then\n        log_info \"Prüfe DNS-Auflösung für $SSL_DOMAIN...\"\n        if nslookup \"$SSL_DOMAIN\" >/dev/null 2>&1; then\n            log_success \"✅ DNS-Auflösung erfolgreich\"\n            if [ \"$DEBUG\" = \"true\" ]; then\n                dns_result=$(nslookup \"$SSL_DOMAIN\" 2>&1)\n                log_debug \"DNS-Details: $dns_result\"\n            fi\n        else\n            log_error \"❌ DNS-Auflösung fehlgeschlagen für $SSL_DOMAIN\"\n            log_error \"Let's Encrypt benötigt eine öffentlich auflösbare Domain\"\n            if [ \"$FORCE_DOMAIN_VALIDATION\" != \"true\" ]; then\n                log_error \"💡 Setze FORCE_DOMAIN_VALIDATION=true um trotzdem fortzufahren\"\n                log_warn \"🔄 Fallback zu Self-Signed...\"\n                export SSL_METHOD=\"selfsigned\"\n                exec \"$0\"\n                exit 0\n            else\n                log_warn \"⚠️ Domain-Validierung erzwungen - fahre trotz DNS-Fehler fort\"\n            fi\n        fi\n    else\n        log_warn \"⚠️ Keine DNS-Tools verfügbar - überspringe DNS-Check\"\n    fi\n    \n    # 3. Port-Verfügbarkeit prüfen\n    log_info \"Prüfe Port $LETS_ENCRYPT_PORT für Let's Encrypt...\"\n    port_blocked=false\n    \n    if command -v netstat >/dev/null 2>&1; then\n        port_check=$(netstat -tlnp 2>/dev/null | grep \":$LETS_ENCRYPT_PORT \" || echo \"\")\n        if [ -n \"$port_check\" ]; then\n            log_error \"❌ Port $LETS_ENCRYPT_PORT ist belegt:\"\n            log_debug \"Port-Details: $port_check\"\n            port_blocked=true\n        else\n            log_success \"✅ Port $LETS_ENCRYPT_PORT ist verfügbar\"\n        fi\n    elif command -v ss >/dev/null 2>&1; then\n        port_check=$(ss -tlnp 2>/dev/null | grep \":$LETS_ENCRYPT_PORT \" || echo \"\")\n        if [ -n \"$port_check\" ]; then\n            log_error \"❌ Port $LETS_ENCRYPT_PORT ist belegt:\"\n            log_debug \"Port-Details: $port_check\"\n            port_blocked=true\n        else\n            log_success \"✅ Port $LETS_ENCRYPT_PORT ist verfügbar\"\n        fi\n    else\n        log_warn \"⚠️ Kann Port-Status nicht prüfen - fahre fort\"\n    fi\n    \n    if [ \"$port_blocked\" = \"true\" ]; then\n        log_error \"Let's Encrypt HTTP-Challenge benötigt Port $LETS_ENCRYPT_PORT\"\n        log_error \"💡 LÖSUNGEN:\"\n        log_error \"   1. Ändere LETS_ENCRYPT_PORT auf freien Port\"\n        log_error \"   2. Stoppe Service der Port blockiert\"\n        log_error \"   3. Verwende SSL_METHOD=selfsigned\"\n        log_warn \"🔄 Fallback zu Self-Signed...\"\n        export SSL_METHOD=\"selfsigned\"\n        exec \"$0\"\n        exit 0\n    fi\n    \n    # 4. Certbot Installation prüfen\n    if ! command -v certbot >/dev/null 2>&1; then\n        log_error \"❌ Certbot nicht gefunden\"\n        log_info \"Versuche Certbot-Installation...\"\n        \n        if command -v apt-get >/dev/null 2>&1; then\n            log_debug \"Installiere Certbot via apt...\"\n            apt-get update >/dev/null 2>&1\n            if apt-get install -y certbot python3-certbot-nginx >/dev/null 2>&1; then\n                log_success \"✅ Certbot Installation erfolgreich\"\n            else\n                log_error \"❌ Certbot Installation fehlgeschlagen\"\n                log_warn \"🔄 Fallback zu Self-Signed...\"\n                export SSL_METHOD=\"selfsigned\"\n                exec \"$0\"\n                exit 0\n            fi\n        else\n            log_error \"❌ Kein unterstützter Package Manager für Certbot-Installation\"\n            log_warn \"🔄 Fallback zu Self-Signed...\"\n            export SSL_METHOD=\"selfsigned\"\n            exec \"$0\"\n            exit 0\n        fi\n    else\n        local certbot_version=$(certbot --version 2>&1 | head -1 || echo \"Version unbekannt\")\n        log_debug \"Certbot verfügbar: $certbot_version\"\n    fi\n    \n    # 5. Externe Erreichbarkeit testen\n    if command -v curl >/dev/null 2>&1; then\n        log_info \"Teste externe Erreichbarkeit...\"\n        external_test=$(curl -s --connect-timeout 10 -o /dev/null -w \"%{http_code}\" \"http://${SSL_DOMAIN}\" 2>/dev/null || echo \"FAIL\")\n        if [ \"$external_test\" != \"FAIL\" ] && [ \"$external_test\" != \"000\" ]; then\n            log_success \"✅ Domain ist extern erreichbar (HTTP Status: $external_test)\"\n        else\n            log_warn \"⚠️ Domain ist möglicherweise nicht extern erreichbar\"\n            log_warn \"Let's Encrypt benötigt externe Erreichbarkeit für Domain-Validierung\"\n            log_debug \"HTTP-Test Result: $external_test\"\n        fi\n    fi\n    \n    # 6. Certbot ausführen mit detailliertem Logging\n    log_info \"Führe Certbot aus...\"\n    certbot_cmd=\"certbot certonly --standalone --non-interactive --agree-tos --email '${SSL_EMAIL}' --domains '${SSL_DOMAIN}' --key-type rsa --rsa-key-size ${SSL_KEY_SIZE} --preferred-challenges http --http-01-port ${LETS_ENCRYPT_PORT}\"\n    \n    if [ \"$DEBUG\" = \"true\" ]; then\n        certbot_cmd+=\" --verbose\"\n        log_debug \"Certbot-Befehl: $certbot_cmd\"\n    fi\n    \n    # Certbot ausführen und Output loggen\n    certbot_success=false\n    if eval \"$certbot_cmd\" 2>&1 | while read line; do \n        log_debug \"Certbot: $line\"\n        if echo \"$line\" | grep -E \"(Successfully received|Congratulations|IMPORTANT NOTES)\" >/dev/null; then\n            log_success \"$line\"\n        elif echo \"$line\" | grep -E \"(Error|Failed|Unable|Problem|Challenge failed)\" >/dev/null; then\n            log_error \"Certbot Error: $line\"\n        elif echo \"$line\" | grep -E \"(Obtaining|Performing|Waiting)\" >/dev/null; then\n            log_info \"$line\"\n        fi\n    done; then\n        certbot_success=true\n        log_success \"✅ Certbot erfolgreich ausgeführt\"\n    else\n        log_error \"❌ Certbot fehlgeschlagen\"\n        certbot_success=false\n    fi\n    \n    # 7. Zertifikate kopieren\n    if [ \"$certbot_success\" = \"true\" ]; then\n        letsencrypt_path=\"/etc/letsencrypt/live/$SSL_DOMAIN\"\n        log_debug \"Suche Zertifikate in: $letsencrypt_path\"\n        \n        if [ -d \"$letsencrypt_path\" ]; then\n            log_info \"Kopiere Let's Encrypt Zertifikate...\"\n            \n            if [ -f \"$letsencrypt_path/fullchain.pem\" ] && [ -f \"$letsencrypt_path/privkey.pem\" ]; then\n                cp \"$letsencrypt_path/fullchain.pem\" ssl/fullchain.pem\n                cp \"$letsencrypt_path/privkey.pem\" ssl/privkey.pem\n                \n                log_success \"✅ Let's Encrypt Zertifikat erfolgreich kopiert\"\n                \n                if [ \"$DEBUG\" = \"true\" ]; then\n                    cert_info=$(openssl x509 -in ssl/fullchain.pem -subject -dates -noout 2>/dev/null || echo \"Cert-Info nicht verfügbar\")\n                    log_debug \"Zertifikat-Info: $cert_info\"\n                fi\n            else\n                log_error \"❌ Zertifikat-Dateien nicht in $letsencrypt_path gefunden\"\n                log_warn \"🔄 Fallback zu Self-Signed...\"\n                export SSL_METHOD=\"selfsigned\"\n                exec \"$0\"\n                exit 0\n            fi\n        else\n            log_error \"❌ Let's Encrypt Zertifikat-Verzeichnis nicht gefunden: $letsencrypt_path\"\n            \n            if [ \"$DEBUG\" = \"true\" ] && [ -d \"/etc/letsencrypt/live\" ]; then\n                log_debug \"Verfügbare Zertifikat-Verzeichnisse:\"\n                ls -la /etc/letsencrypt/live/ 2>/dev/null | while read line; do\n                    log_debug \"  $line\"\n                done\n            fi\n            \n            log_warn \"🔄 Fallback zu Self-Signed...\"\n            export SSL_METHOD=\"selfsigned\"\n            exec \"$0\"\n            exit 0\n        fi\n    else\n        log_error \"❌ Certbot war nicht erfolgreich\"\n        log_warn \"🔄 Fallback zu Self-Signed...\"\n        export SSL_METHOD=\"selfsigned\"\n        exec \"$0\"\n        exit 0\n    fi\n    \nelif [ \"${SSL_METHOD}\" = \"cloudflare\" ]; then\n    log_info \"☁️ Cloudflare Origin Certificate Setup...\"\n    \n    if [ -z \"${CLOUDFLARE_API_TOKEN}\" ]; then\n        log_error \"❌ CLOUDFLARE_API_TOKEN ist erforderlich\"\n        log_error \"Setze die Umgebungsvariable CLOUDFLARE_API_TOKEN\"\n        log_warn \"🔄 Fallback zu Self-Signed...\"\n        export SSL_METHOD=\"selfsigned\"\n        exec \"$0\"\n        exit 0\n    fi\n    \n    log_debug \"Cloudflare Token verfügbar (${#CLOUDFLARE_API_TOKEN} Zeichen)\"\n    \n    # Cloudflare-Setup (vereinfacht für Docker)\n    log_error \"❌ Cloudflare-Setup in Docker Container noch nicht vollständig implementiert\"\n    log_error \"Verwende 'selfsigned' als Alternative\"\n    log_warn \"🔄 Fallback zu Self-Signed...\"\n    export SSL_METHOD=\"selfsigned\"\n    exec \"$0\"\n    exit 0\n    \nelse\n    log_error \"❌ Unbekannte SSL-Methode: ${SSL_METHOD}\"\n    log_error \"Unterstützte Methoden: selfsigned, letsencrypt, cloudflare\"\n    log_warn \"🔄 Fallback zu Self-Signed...\"\n    export SSL_METHOD=\"selfsigned\"\n    exec \"$0\"\n    exit 0\nfi\n\n# Berechtigungen setzen\nchmod 644 ssl/fullchain.pem 2>/dev/null || true\nchmod 600 ssl/privkey.pem 2>/dev/null || true\n\n# Finale Validierung mit erweiterten Details\nif openssl x509 -in ssl/fullchain.pem -text -noout >/dev/null 2>&1; then\n    log_success \"✅ SSL-Zertifikat erfolgreich validiert\"\n    \n    if [ \"$DEBUG\" = \"true\" ]; then\n        log_debug \"=== ZERTIFIKAT-DETAILS ===\"\n        cert_text=$(openssl x509 -in ssl/fullchain.pem -text -noout 2>/dev/null)\n        \n        # Subject und Issuer\n        subject=$(echo \"$cert_text\" | grep \"Subject:\" | sed 's/.*Subject: //')\n        issuer=$(echo \"$cert_text\" | grep \"Issuer:\" | sed 's/.*Issuer: //')\n        log_debug \"Subject: $subject\"\n        log_debug \"Issuer: $issuer\"\n        \n        # Gültigkeitsdaten\n        not_before=$(echo \"$cert_text\" | grep \"Not Before:\" | sed 's/.*Not Before: //')\n        not_after=$(echo \"$cert_text\" | grep \"Not After :\" | sed 's/.*Not After : //')\n        log_debug \"Gültig von: $not_before\"\n        log_debug \"Gültig bis: $not_after\"\n        \n        # Subject Alternative Names\n        san=$(echo \"$cert_text\" | grep -A1 \"Subject Alternative Name:\" | tail -1 | sed 's/^[[:space:]]*//' || echo \"Keine SAN\")\n        log_debug \"Alternative Names: $san\"\n    fi\n    \n    # KeyUsage-Check für Browser-Kompatibilität\n    if openssl x509 -in ssl/fullchain.pem -text -noout | grep -q \"digitalSignature\"; then\n        log_success \"🌐 Browser-Kompatibilität: ✅ ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\n        log_success \"✅ Zertifikat hat korrekte KeyUsage für moderne Browser\"\n    else\n        log_warn \"⚠️ Browser-Kompatibilität möglicherweise eingeschränkt\"\n        log_warn \"Zertifikat hat möglicherweise nicht die optimale KeyUsage\"\n    fi\n    \n    # Zusammenfassung\n    echo \"\"\n    echo -e \"${GREEN}🎉 Enhanced SSL-Setup erfolgreich abgeschlossen!${NC}\"\n    echo -e \"${BLUE}📋 Zusammenfassung:${NC}\"\n    echo -e \"${BLUE}   Methode: ${NC}${SSL_METHOD}\"\n    echo -e \"${BLUE}   Domain: ${NC}${SSL_DOMAIN}\"\n    if [ \"${SSL_METHOD}\" = \"letsencrypt\" ]; then\n        echo -e \"${BLUE}   Port: ${NC}${LETS_ENCRYPT_PORT}\"\n        echo -e \"${BLUE}   Email: ${NC}${SSL_EMAIL}\"\n    fi\n    echo -e \"${BLUE}   Key-Größe: ${NC}${SSL_KEY_SIZE} bits\"\n    echo -e \"${BLUE}   Debug-Modus: ${NC}${DEBUG}\"\n    \n    if [ \"$DEBUG\" = \"true\" ]; then\n        echo -e \"${CYAN}🔍 Debug-Logs verfügbar in: ssl/ssl-debug.log${NC}\"\n        log_count=$(wc -l < ssl/ssl-debug.log 2>/dev/null || echo \"0\")\n        echo -e \"${CYAN}📊 Debug-Log Einträge: ${log_count}${NC}\"\n    fi\n    \nelse\n    log_error \"❌ SSL-Zertifikat ungültig oder nicht erstellt\"\n    if [ -f ssl/fullchain.pem ]; then\n        log_debug \"Zertifikat-Datei existiert, aber ist ungültig\"\n        if [ \"$DEBUG\" = \"true\" ]; then\n            cert_error=$(openssl x509 -in ssl/fullchain.pem -text -noout 2>&1 || echo \"Unbekannter Zertifikat-Fehler\")\n            log_debug \"OpenSSL-Error: $cert_error\"\n        fi\n    else\n        log_debug \"Zertifikat-Datei wurde nicht erstellt\"\n    fi\n    exit 1\nfi\n\n# Erfolgs-Status\necho \"\"\necho -e \"${GREEN}🔐 SSL-Setup abgeschlossen - HTTPS bereit!${NC}\"\nif [ \"$DEBUG\" = \"true\" ]; then\n    echo -e \"${CYAN}🔍 Für weitere Details siehe: ssl/ssl-debug.log${NC}\"\nfi\nENHANCED_SSL_EOF\n\n# SSL-Setup ausführbar machen\nchmod +x ssl-setup-simple.sh\n\n# SSL-Setup ausführen wenn aktiviert\nif [ \"${SSL_SETUP_ON_START:-true}\" = \"true\" ] && [ \"${REQUIRE_HTTPS:-false}\" = \"true\" ]; then\n    echo \"🔐 Führe Enhanced SSL-Setup mit vollständigem Debugging aus...\"\n    \n    # Debug-Variablen für SSL-Setup setzen\n    export SSL_DEBUG=\"${SSL_DEBUG:-false}\"\n    export SSL_VERBOSE=\"${SSL_VERBOSE:-false}\"\n    export LETS_ENCRYPT_PORT=\"${LETS_ENCRYPT_PORT:-80}\"\n    export FORCE_DOMAIN_VALIDATION=\"${FORCE_DOMAIN_VALIDATION:-false}\"\n    \n    echo \"🔧 SSL-Setup Konfiguration:\"\n    echo \"   SSL_METHOD: ${SSL_METHOD}\"\n    echo \"   SSL_DOMAIN: ${SSL_DOMAIN}\"\n    echo \"   SSL_EMAIL: ${SSL_EMAIL}\"\n    echo \"   SSL_DEBUG: ${SSL_DEBUG}\"\n    echo \"   SSL_VERBOSE: ${SSL_VERBOSE}\"\n    echo \"   LETS_ENCRYPT_PORT: ${LETS_ENCRYPT_PORT}\"\n    echo \"   FORCE_DOMAIN_VALIDATION: ${FORCE_DOMAIN_VALIDATION}\"\n    echo \"\"\n    \n    if ./ssl-setup-simple.sh; then\n        echo \"✅ Enhanced SSL-Setup erfolgreich\"\n        if [ -f \"ssl/fullchain.pem\" ] && [ -f \"ssl/privkey.pem\" ]; then\n            echo \"🔐 HTTPS-Zertifikate erstellt\"\n            echo \"🌐 Enhanced Browser-Kompatibilität aktiviert\"\n            echo \"🔍 Debug-Logs verfügbar in: ssl/ssl-debug.log\"\n            \n            # Zertifikat-Details anzeigen wenn Debug aktiv\n            if [ \"${SSL_DEBUG}\" = \"true\" ]; then\n                echo \"\"\n                echo \"📋 ZERTIFIKAT-ZUSAMMENFASSUNG:\"\n                cert_subject=$(openssl x509 -in ssl/fullchain.pem -subject -noout 2>/dev/null | sed 's/subject=//' || echo \"Unbekannt\")\n                cert_expiry=$(openssl x509 -in ssl/fullchain.pem -enddate -noout 2>/dev/null | sed 's/notAfter=//' || echo \"Unbekannt\")\n                cert_issuer=$(openssl x509 -in ssl/fullchain.pem -issuer -noout 2>/dev/null | sed 's/issuer=//' || echo \"Unbekannt\")\n                echo \"   Subject: $cert_subject\"\n                echo \"   Issuer: $cert_issuer\"\n                echo \"   Läuft ab: $cert_expiry\"\n                \n                # KeyUsage-Check\n                if openssl x509 -in ssl/fullchain.pem -text -noout | grep -q \"digitalSignature\"; then\n                    echo \"   KeyUsage: ✅ Browser-kompatibel (digitalSignature, keyEncipherment)\"\n                    echo \"   Status: ✅ ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\n                else\n                    echo \"   KeyUsage: ⚠️ Möglicherweise eingeschränkt\"\n                fi\n                \n                # Debug-Log Statistiken\n                if [ -f \"ssl/ssl-debug.log\" ]; then\n                    log_lines=$(wc -l < ssl/ssl-debug.log 2>/dev/null || echo \"0\")\n                    log_size=$(stat -c%s ssl/ssl-debug.log 2>/dev/null || echo \"0\")\n                    echo \"   Debug-Log: $log_lines Zeilen, $log_size Bytes\"\n                fi\n            fi\n        fi\n    else\n        ssl_exit_code=$?\n        echo \"⚠️ SSL-Setup fehlgeschlagen (Exit Code: $ssl_exit_code)\"\n        echo \"🔍 Prüfe ssl/ssl-debug.log für Details\"\n        \n        # Bei Debugging: Letzte Log-Zeilen anzeigen\n        if [ \"${SSL_DEBUG}\" = \"true\" ] && [ -f \"ssl/ssl-debug.log\" ]; then\n            echo \"\"\n            echo \"📋 LETZTE DEBUG-LOG EINTRÄGE:\"\n            tail -10 ssl/ssl-debug.log 2>/dev/null || echo \"Keine Debug-Logs verfügbar\"\n        fi\n        \n        echo \"\"\n        echo \"💡 TROUBLESHOOTING-HINWEISE:\"\n        if [ \"${SSL_METHOD}\" = \"letsencrypt\" ]; then\n            echo \"   Let's Encrypt Probleme:\"\n            echo \"   • Domain muss öffentlich erreichbar sein: ${SSL_DOMAIN}\"\n            echo \"   • Port ${LETS_ENCRYPT_PORT} muss verfügbar sein\"\n            echo \"   • DNS-Auflösung muss funktionieren\"\n            echo \"   • Verwende SSL_METHOD=selfsigned für localhost/private Domains\"\n        fi\n        echo \"   • Setze SSL_DEBUG=true für detaillierte Logs\"\n        echo \"   • Prüfe Container-Logs nach SSL-Setup Fehlern\"\n        echo \"   • Verwende Self-Signed für interne/Test-Umgebungen\"\n    fi\nelse\n    echo \"ℹ️ Enhanced SSL-Setup übersprungen\"\n    echo \"   SSL_SETUP_ON_START: ${SSL_SETUP_ON_START:-true}\"\n    echo \"   REQUIRE_HTTPS: ${REQUIRE_HTTPS:-false}\"\n    if [ \"${REQUIRE_HTTPS:-false}\" = \"false\" ]; then\n        echo \"   💡 Setze REQUIRE_HTTPS=true um SSL zu aktivieren\"\n    fi\nfi\n\n# Finale Berechtigungen\nchmod 755 .\nchmod 644 *.json *.js *.md 2>/dev/null || true\nchmod +x *.sh 2>/dev/null || true\n\n# Grundlegende Dateien erstellen\ntouch logs/security.log\necho \"[]\" > backups/schedules.json 2>/dev/null || true\necho \"* text=auto\" > .gitattributes 2>/dev/null || true\n\n# Validierung\necho \"Validiere Installation...\"\nif node -e \"JSON.parse(require('fs').readFileSync('package.json', 'utf8'))\" 2>/dev/null; then\n    echo \"✅ package.json gültig\"\nelse\n    echo \"❌ package.json ungültig\"\n    exit 1\nfi\n\necho \"=================================================\"\necho \"🎉 ENHANCED INSTALLATION ERFOLGREICH!\"\necho \"=================================================\"\necho \"✅ Repository: ${REPO_URL}\"\necho \"✅ Branch: ${REPO_BRANCH}\"\necho \"✅ Node.js: $(node --version 2>/dev/null || echo 'Unknown')\"\necho \"✅ NPM: $(npm --version 2>/dev/null || echo 'Unknown')\"\necho \"✅ Enhanced SSL: Mit erweiterten Debugging (SYNTAX FIXED)\"\necho \"✅ Browser Fix: ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\necho \"✅ Debug-Support: SSL_DEBUG, SSL_VERBOSE verfügbar\"\necho \"✅ Port-Konfiguration: LETS_ENCRYPT_PORT konfigurierbar\"\necho \"✅ Intelligent Fallback: Automatisch zu Self-Signed bei Problemen\"\necho \"✅ Syntax-Fix: Here-Document Probleme vollständig behoben\"\n\nif [ -f \"ssl/fullchain.pem\" ] && [ -f \"ssl/privkey.pem\" ]; then\n    echo \"🔐 SSL Status: Zertifikate verfügbar\"\nelse\n    echo \"ℹ️ SSL Status: Wird beim ersten Start erstellt\"\nfi\n\necho \"=================================================\"\necho \"🚀 SERVER BEREIT MIT ENHANCED SSL-DEBUGGING!\"\necho \"🔧 Erweiterte SSL-Konfiguration über ENV-Variablen\"\necho \"🔍 Debug-Logs: ssl/ssl-debug.log\"\necho \"🛠️ Alle Syntax-Probleme behoben - Production Ready!\"\necho \"=================================================\"",
      "container": "debian:bookworm-slim",
      "entrypoint": "bash"
    }
  }
  ,
  "variables": [
    {
      "name": "Auto-Update aktivieren",
      "description": "Automatische Updates bei Serverstart vom offiziellen Repository",
      "env_variable": "AUTO_UPDATE",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 1,
      "field_type": "text"
    },
    {
      "name": "Node Environment",
      "description": "Node.js Umgebung (production empfohlen)",
      "env_variable": "NODE_ENV",
      "default_value": "production",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:production,development",
      "sort": 2,
      "field_type": "text"
    },
    {
      "name": "Admin Benutzername",
      "description": "Standard Admin Benutzername für erste Anmeldung",
      "env_variable": "ADMIN_USERNAME",
      "default_value": "admin",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:3|max:20",
      "sort": 3,
      "field_type": "text"
    },
    {
      "name": "Admin Passwort",
      "description": "Standard Admin Passwort (WICHTIG: Nach dem ersten Login ändern!)",
      "env_variable": "ADMIN_PASSWORD",
      "default_value": "admin123",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:6",
      "sort": 4,
      "field_type": "text"
    },
    {
      "name": "Session Secret",
      "description": "Geheimer Schlüssel für Sessions (mindestens 32 Zeichen)",
      "env_variable": "SESSION_SECRET",
      "default_value": "db-backup-session-secret-change-in-production-32chars-min",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 5,
      "field_type": "text"
    },
    {
      "name": "JWT Secret",
      "description": "Geheimer Schlüssel für JWT Tokens (mindestens 32 Zeichen)",
      "env_variable": "JWT_SECRET",
      "default_value": "db-backup-jwt-secret-change-in-production-32chars-minimum",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 6,
      "field_type": "text"
    },
    {
      "name": "Maximale Backups",
      "description": "Maximale Anzahl von Backups die gespeichert werden",
      "env_variable": "MAX_BACKUPS",
      "default_value": "10",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:100",
      "sort": 7,
      "field_type": "text"
    },
    {
      "name": "Backup-Komprimierung",
      "description": "Aktiviert Komprimierung für Backups",
      "env_variable": "ENABLE_COMPRESSION",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 8,
      "field_type": "text"
    },
    {
      "name": "HTTPS aktivieren",
      "description": "Erzwingt HTTPS für die Anwendung (SSL-Zertifikat erforderlich)",
      "env_variable": "REQUIRE_HTTPS",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 9,
      "field_type": "text"
    },
    {
      "name": "HTTPS Port",
      "description": "Port für den HTTPS-Server",
      "env_variable": "HTTPS_PORT",
      "default_value": "8443",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:65535",
      "sort": 10,
      "field_type": "text"
    },
    {
      "name": "SSL-Methode",
      "description": "SSL-Zertifikat Methode: selfsigned (sicher für Docker), letsencrypt (echte Domain), cloudflare (Cloudflare Origin)",
      "env_variable": "SSL_METHOD",
      "default_value": "selfsigned",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:selfsigned,letsencrypt,cloudflare,manual",
      "sort": 11,
      "field_type": "text"
    },
    {
      "name": "SSL Domain",
      "description": "Domain für SSL-Zertifikat (für Let's Encrypt: echte Domain erforderlich!)",
      "env_variable": "SSL_DOMAIN",
      "default_value": "localhost",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:3|max:255",
      "sort": 12,
      "field_type": "text"
    },
    {
      "name": "SSL Email",
      "description": "Email-Adresse für SSL-Zertifikat (erforderlich für Let's Encrypt)",
      "env_variable": "SSL_EMAIL",
      "default_value": "admin@localhost",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:5|max:255",
      "sort": 13,
      "field_type": "text"
    },
    {
      "name": "SSL Auto-Renewal",
      "description": "Automatische Erneuerung von SSL-Zertifikaten",
      "env_variable": "SSL_AUTO_RENEWAL",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 14,
      "field_type": "text"
    },
    {
      "name": "SSL Setup beim Start",
      "description": "Führt SSL-Setup automatisch beim Server-Start aus",
      "env_variable": "SSL_SETUP_ON_START",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 15,
      "field_type": "text"
    },
    {
      "name": "SSL Key-Größe",
      "description": "RSA Schlüssel-Größe in Bits (4096 = sehr sicher, 2048 = Standard)",
      "env_variable": "SSL_KEY_SIZE",
      "default_value": "4096",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|in:2048,4096",
      "sort": 16,
      "field_type": "text"
    },
    {
      "name": "SSL Zertifikat-Gültigkeit",
      "description": "Gültigkeit des SSL-Zertifikats in Tagen (nur für Self-Signed)",
      "env_variable": "SSL_CERT_VALIDITY",
      "default_value": "365",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:30|max:3650",
      "sort": 17,
      "field_type": "text"
    },
    {
      "name": "🔍 SSL Debug-Modus",
      "description": "Aktiviert erweiterte Debug-Ausgaben für SSL-Setup (Troubleshooting)",
      "env_variable": "SSL_DEBUG",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 18,
      "field_type": "text"
    },
    {
      "name": "🔍 SSL Verbose-Modus",
      "description": "Aktiviert detaillierte Ausgaben für SSL-Setup",
      "env_variable": "SSL_VERBOSE",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 19,
      "field_type": "text"
    },
    {
      "name": "🌐 Let's Encrypt Port",
      "description": "Port für Let's Encrypt HTTP-Challenge (Standard: 80, Docker oft: 8080)",
      "env_variable": "LETS_ENCRYPT_PORT",
      "default_value": "80",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:65535",
      "sort": 20,
      "field_type": "text"
    },
    {
      "name": "🔍 Domain-Validierung erzwingen",
      "description": "Erzwingt Domain-Validierung auch bei DNS-Fehlern (nur für Debugging)",
      "env_variable": "FORCE_DOMAIN_VALIDATION",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 21,
      "field_type": "text"
    },
    {
      "name": "Zwei-Faktor-Authentifizierung",
      "description": "Aktiviert 2FA für zusätzliche Sicherheit",
      "env_variable": "ENABLE_2FA",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 22,
      "field_type": "text"
    },
    {
      "name": "Starke Passwörter erzwingen",
      "description": "Erzwingt starke Passwörter (min. 12 Zeichen, Groß-/Kleinbuchstaben, Zahlen, Sonderzeichen)",
      "env_variable": "STRONG_PASSWORDS",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 23,
      "field_type": "text"
    },
    {
      "name": "Max. Login-Fehlversuche",
      "description": "Maximale Anzahl fehlgeschlagener Login-Versuche vor Sperrung",
      "env_variable": "MAX_FAILED_ATTEMPTS",
      "default_value": "5",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:20",
      "sort": 24,
      "field_type": "text"
    },
    {
      "name": "Git Backup aktivieren",
      "description": "Automatisches Pushen von Backups zu Git Repository",
      "env_variable": "GIT_BACKUP_ENABLED",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 25,
      "field_type": "text"
    },
    {
      "name": "Git Repository URL",
      "description": "HTTPS URL des Git Repositories für Backups",
      "env_variable": "GIT_BACKUP_REPOSITORY",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:500",
      "sort": 26,
      "field_type": "text"
    },
    {
      "name": "Git Benutzername",
      "description": "Git Benutzername für Repository-Zugriff",
      "env_variable": "GIT_BACKUP_USERNAME",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:100",
      "sort": 27,
      "field_type": "text"
    },
    {
      "name": "Git Access Token",
      "description": "Personal Access Token oder App Password für Git Repository",
      "env_variable": "GIT_BACKUP_TOKEN",
      "default_value": "",
      "user_viewable": false,
      "user_editable": true,
      "rules": "nullable|string|max:200",
      "sort": 28,
      "field_type": "text"
    },
    {
      "name": "Git Branch",
      "description": "Git Branch für Backups",
      "env_variable": "GIT_BACKUP_BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:50",
      "sort": 29,
      "field_type": "text"
    },
    {
      "name": "Cloudflare API Token",
      "description": "Cloudflare API Token für Cloudflare Origin Certificates (nur bei SSL_METHOD=cloudflare)",
      "env_variable": "CLOUDFLARE_API_TOKEN",
      "default_value": "",
      "user_viewable": false,
      "user_editable": true,
      "rules": "nullable|string|max:200",
      "sort": 30,
      "field_type": "text"
    }
  ]
}
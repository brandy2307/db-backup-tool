{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
  "meta": {
    "version": "PTDL_v2",
    "update_url": "https://github.com/brandy2307/db-backup-tool/blob/2ecc5011ab4e13b03d8fe37c8483efc70d00d43a/dbtool-egg.json"
  },
  "exported_at": "2024-06-02T14:40:56+00:00",
  "name": "DB Backup Tool (Environment Fix)",
  "author": "brandy@example.com",
  "uuid": "db9f372e-01d7-4c9b-a109-e49990d68d46",
  "description": "Tool for automated Backups of Databases",
  "features": null,
  "docker_images": {
    "ghcr.io/parkervcp/yolks:nodejs_18": "ghcr.io/parkervcp/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "cd /home/container && if [ ! -f \"db-backup-tool/package.json\" ]; then echo \"ERROR: package.json not found. Please reinstall the server.\"; exit 1; fi && cd db-backup-tool && npm start",
  "config": {
    "files": "{\r\n    \"db-backup-tool/config.json\": {\r\n        \"parser\": \"json\",\r\n        \"find\": {\r\n            \"server.port\": \"{{server.build.default.port}}\",\r\n            \"server.host\": \"0.0.0.0\"\r\n        }\r\n    }\r\n}",
    "startup": "{\r\n    \"done\": \"Server running on Port:\"\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\n# DB Backup Tool Installation mit Environment Variables\n\nset -e\n\ndeclare -r DIR=\"/mnt/server\"\ndeclare -r APP_DIR=\"${DIR}/db-backup-tool\"\n\n# Verwende Environment Variables statt Template-Substitution\nREPO_URL=\"${GITHUB_REPOSITORY:-https://github.com/brandy23/db-backup-tool.git}\"\nREPO_BRANCH=\"${GITHUB_BRANCH:-main}\"\n\necho \"=================================\"\necho \"DB BACKUP TOOL INSTALLATION\"\necho \"=================================\"\necho \"Repository: ${REPO_URL}\"\necho \"Branch: ${REPO_BRANCH}\"\necho \"Target: ${APP_DIR}\"\necho \"=================================\"\n\n# System Dependencies installieren\necho \"[1/6] Installing system dependencies...\"\napt update\napt install -y wget curl gnupg2 software-properties-common git\n\n# Node.js installieren\necho \"[2/6] Installing Node.js...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | bash -\napt install -y nodejs\n\n# Database Tools installieren\necho \"[3/6] Installing database tools...\"\napt install -y mysql-client || apt install -y default-mysql-client || echo \"MySQL client failed\"\napt install -y postgresql-client || apt install -y postgresql-client-common || echo \"PostgreSQL client failed\"\n\n# MongoDB Tools\necho \"Installing MongoDB tools...\"\ncurl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg\necho \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/debian bookworm/mongodb-org/7.0 main\" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list\napt update\napt install -y mongodb-database-tools || echo \"MongoDB tools failed\"\n\n# Tools verifikation\necho \"[4/6] Verifying tools...\"\necho \"Node.js: $(node --version)\"\necho \"NPM: $(npm --version)\"\necho \"Git: $(git --version)\"\n\n# Wechsel zum Zielverzeichnis\ncd \"${DIR}\"\n\n# Alte Installation entfernen\nif [ -d \"${APP_DIR}\" ]; then\n    echo \"Removing old installation...\"\n    rm -rf \"${APP_DIR}\"\nfi\n\n# Repository Setup\necho \"[5/6] Setting up repository...\"\necho \"Testing repository access: ${REPO_URL}\"\n\n# Test Repository-Zugriff\nif ! git ls-remote --heads \"${REPO_URL}\" >/dev/null 2>&1; then\n    echo \"ERROR: Repository '${REPO_URL}' is not accessible!\"\n    echo \"Please check:\"\n    echo \"1. Repository URL is correct\"\n    echo \"2. Repository is public\"\n    echo \"3. Repository exists\"\n    echo \"\"\n    echo \"Current environment variables:\"\n    echo \"GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}\"\n    echo \"GITHUB_BRANCH: ${GITHUB_BRANCH}\"\n    echo \"\"\n    echo \"If these are empty, please set them in the server variables.\"\n    exit 1\nfi\n\n# Test Branch-Existenz\nif ! git ls-remote --heads \"${REPO_URL}\" | grep -q \"refs/heads/${REPO_BRANCH}$\"; then\n    echo \"ERROR: Branch '${REPO_BRANCH}' does not exist!\"\n    echo \"Available branches:\"\n    git ls-remote --heads \"${REPO_URL}\" | sed 's/.*refs\\/heads\\///'\n    exit 1\nfi\n\n# Repository klonen\necho \"Cloning repository...\"\nif ! git clone -b \"${REPO_BRANCH}\" \"${REPO_URL}\" \"${APP_DIR}\"; then\n    echo \"ERROR: Git clone failed!\"\n    exit 1\nfi\n\n# Verifikation nach Clone\ncd \"${APP_DIR}\"\necho \"Repository cloned successfully to: $(pwd)\"\necho \"Contents:\"\nls -la\n\n# PrÃ¼fe kritische Dateien\nif [ ! -f \"package.json\" ]; then\n    echo \"ERROR: package.json not found in repository!\"\n    echo \"Repository must contain package.json file.\"\n    exit 1\nfi\n\nif [ ! -f \"server.js\" ]; then\n    echo \"ERROR: server.js not found in repository!\"\n    echo \"Repository must contain server.js file.\"\n    exit 1\nfi\n\n# Validiere package.json\nif ! node -e \"JSON.parse(require('fs').readFileSync('package.json', 'utf8'))\"; then\n    echo \"ERROR: package.json is invalid JSON!\"\n    exit 1\nfi\n\necho \"âœ“ All required files found and valid\"\n\n# Dependencies installieren\necho \"[6/6] Installing dependencies...\"\nnpm cache clean --force\nif ! npm install --production; then\n    echo \"Trying with legacy-peer-deps...\"\n    npm install --production --legacy-peer-deps\nfi\n\n# Verzeichnisse erstellen\necho \"Creating directories...\"\nmkdir -p backups logs config public\n\n# Config erstellen\nif [ ! -f \"config.json\" ]; then\n    echo \"Creating config.json...\"\n    cat > config.json << EOF\n{\n  \"server\": {\n    \"port\": 8080,\n    \"host\": \"0.0.0.0\"\n  },\n  \"security\": {\n    \"sessionSecret\": \"change-this-secret-key-in-production\",\n    \"jwtSecret\": \"change-this-jwt-secret-in-production\",\n    \"defaultAdmin\": {\n      \"username\": \"admin\",\n      \"password\": \"admin123\"\n    }\n  },\n  \"backup\": {\n    \"defaultPath\": \"./backups\",\n    \"maxBackups\": 10,\n    \"compression\": true\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"file\": \"./logs/app.log\"\n  },\n  \"updates\": {\n    \"autoUpdate\": true,\n    \"repository\": \"${REPO_URL}\",\n    \"branch\": \"${REPO_BRANCH}\"\n  }\n}\nEOF\nfi\n\n# Update-Script erstellen\ncat > update.sh << EOF\n#!/bin/bash\n# Auto-Update Script\n\necho \"ðŸ”„ Checking for updates...\"\n\n# Backup configs\nif [ -f \"config.json\" ]; then\n    cp config.json config.json.backup\nfi\nif [ -f \"backups/schedules.json\" ]; then\n    cp backups/schedules.json backups/schedules.json.backup\nfi\n\n# Git update\nif [ -d \".git\" ]; then\n    git fetch origin\n    LOCAL=\\$(git rev-parse HEAD)\n    REMOTE=\\$(git rev-parse origin/${REPO_BRANCH})\n    \n    if [ \"\\$LOCAL\" != \"\\$REMOTE\" ]; then\n        echo \"ðŸ”„ Update available, updating...\"\n        git reset --hard origin/${REPO_BRANCH}\n        npm install --production\n        mkdir -p backups logs config public\n        \n        # Restore configs\n        if [ -f \"config.json.backup\" ]; then\n            mv config.json.backup config.json\n        fi\n        if [ -f \"backups/schedules.json.backup\" ]; then\n            mv backups/schedules.json.backup backups/schedules.json\n        fi\n        \n        echo \"âœ… Update completed\"\n    else\n        echo \"âœ… Already up to date\"\n    fi\nfi\nEOF\n\nchmod +x update.sh\n\n# Weitere Dateien\necho \"[]\" > backups/schedules.json\necho \"* text=auto\" > .gitattributes\n\n# Berechtigungen\nchmod 755 .\nchmod 644 *.json *.js 2>/dev/null || true\nchmod 755 backups logs config public 2>/dev/null || true\n\n# Finale Verifikation\necho \"=================================\"\necho \"INSTALLATION COMPLETE\"\necho \"=================================\"\necho \"Repository: ${REPO_URL}\"\necho \"Branch: ${REPO_BRANCH}\"\necho \"Directory: $(pwd)\"\necho \"Git info: $(git remote get-url origin) ($(git rev-parse --short HEAD))\"\necho \"Node.js: $(node --version)\"\necho \"Critical files:\"\nls -la package.json server.js config.json\necho \"=================================\"\n\nif [ ! -f \"package.json\" ] || [ ! -f \"server.js\" ]; then\n    echo \"CRITICAL ERROR: Missing required files!\"\n    exit 1\nfi\n\necho \"âœ… Installation successful!\"",
      "container": "debian:bookworm-slim",
      "entrypoint": "bash"
    }
  },
  "variables": [
    {
      "name": "GitHub Repository",
      "description": "GitHub Repository URL (z.B. https://github.com/username/repo.git)",
      "env_variable": "GITHUB_REPOSITORY",
      "default_value": "https://github.com/brandy23/db-backup-tool.git",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:10",
      "sort": 1,
      "field_type": "text"
    },
    {
      "name": "GitHub Branch",
      "description": "Branch fÃ¼r Updates (normalerweise main oder master)",
      "env_variable": "GITHUB_BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:1",
      "sort": 2,
      "field_type": "text"
    },
    {
      "name": "Auto-Update aktivieren",
      "description": "Automatische Updates bei Serverstart",
      "env_variable": "AUTO_UPDATE",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 3,
      "field_type": "text"
    },
    {
      "name": "Node Environment",
      "description": "Node.js Umgebung (production oder development)",
      "env_variable": "NODE_ENV",
      "default_value": "production",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:production,development",
      "sort": 4,
      "field_type": "text"
    },
    {
      "name": "Default Admin Username",
      "description": "Standard Admin Benutzername",
      "env_variable": "ADMIN_USERNAME",
      "default_value": "admin",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:3|max:20",
      "sort": 5,
      "field_type": "text"
    },
    {
      "name": "Default Admin Password",
      "description": "Standard Admin Passwort (bitte nach dem ersten Login Ã¤ndern!)",
      "env_variable": "ADMIN_PASSWORD",
      "default_value": "admin123",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:6",
      "sort": 6,
      "field_type": "text"
    },
    {
      "name": "Session Secret",
      "description": "Geheimer SchlÃ¼ssel fÃ¼r Sessions",
      "env_variable": "SESSION_SECRET",
      "default_value": "change-this-secret-key-in-production",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 7,
      "field_type": "text"
    },
    {
      "name": "JWT Secret",
      "description": "Geheimer SchlÃ¼ssel fÃ¼r JWT Tokens",
      "env_variable": "JWT_SECRET",
      "default_value": "change-this-jwt-secret-in-production",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 8,
      "field_type": "text"
    },
    {
      "name": "Max Backups",
      "description": "Maximale Anzahl von Backups die gespeichert werden sollen",
      "env_variable": "MAX_BACKUPS",
      "default_value": "10",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:100",
      "sort": 9,
      "field_type": "text"
    },
    {
      "name": "Enable Compression",
      "description": "Backup-Komprimierung aktivieren",
      "env_variable": "ENABLE_COMPRESSION",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 10,
      "field_type": "text"
    }
  ]
}
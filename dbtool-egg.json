{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2024-06-02T14:40:56+00:00",
  "name": "DB Backup Tool (Debug Version)",
  "author": "admin@example.com",
  "uuid": "db9f372e-01d7-4c9b-a109-e49990d68d46",
  "description": "Debug-Version mit verbesserter Git-Behandlung",
  "features": null,
  "docker_images": {
    "ghcr.io/parkervcp/yolks:nodejs_18": "ghcr.io/parkervcp/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "cd /home/container && if [ ! -f \"db-backup-tool/package.json\" ]; then echo \"ERROR: package.json not found, running emergency setup...\"; if [ ! -d \"db-backup-tool\" ]; then mkdir -p db-backup-tool; fi; cd db-backup-tool; if [ ! -f \"package.json\" ]; then echo \"Creating emergency package.json...\"; echo '{\"name\":\"db-backup-tool\",\"version\":\"1.0.0\",\"main\":\"server.js\",\"scripts\":{\"start\":\"echo ERROR: Repository not properly cloned. Please reinstall the server.\"},\"dependencies\":{}}' > package.json; fi; npm start; else cd db-backup-tool && npm start; fi",
  "config": {
    "files": "{\r\n    \"db-backup-tool/config.json\": {\r\n        \"parser\": \"json\",\r\n        \"find\": {\r\n            \"server.port\": \"{{server.build.default.port}}\",\r\n            \"server.host\": \"0.0.0.0\"\r\n        }\r\n    }\r\n}",
    "startup": "{\r\n    \"done\": \"Server läuft auf Port\"\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\n# DB Backup Tool Installation mit Git-Debugging\n\nset -e  # Exit on any error\n\ndeclare -r DIR=\"/mnt/server\"\ndeclare -r APP_DIR=\"${DIR}/db-backup-tool\"\ndeclare -r GITHUB_REPO=\"{{GITHUB_REPOSITORY}}\"\ndeclare -r BRANCH=\"{{GITHUB_BRANCH}}\"\n\necho \"=================================\"\necho \"DB BACKUP TOOL INSTALLATION\"\necho \"=================================\"\necho \"Repository: ${GITHUB_REPO}\"\necho \"Branch: ${BRANCH}\"\necho \"Target Directory: ${APP_DIR}\"\necho \"Current Directory: $(pwd)\"\necho \"=================================\"\n\n# Installiere System-Dependencies\necho \"[1/7] Installing system dependencies...\"\napt update\napt install -y wget curl gnupg2 software-properties-common git\n\n# Installiere Node.js\necho \"[2/7] Installing Node.js...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | bash -\napt install -y nodejs\n\n# Installiere Database Tools\necho \"[3/7] Installing database tools...\"\napt install -y mysql-client || apt install -y default-mysql-client || echo \"MySQL client failed\"\napt install -y postgresql-client || apt install -y postgresql-client-common || echo \"PostgreSQL client failed\"\n\n# MongoDB Tools\necho \"[4/7] Installing MongoDB tools...\"\ncurl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg\necho \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/debian bookworm/mongodb-org/7.0 main\" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list\napt update\napt install -y mongodb-database-tools || echo \"MongoDB tools failed\"\n\necho \"[5/7] Verifying tools...\"\necho \"Node.js: $(node --version)\"\necho \"NPM: $(npm --version)\"\necho \"Git: $(git --version)\"\necho \"mysqldump: $(which mysqldump || echo 'NOT FOUND')\"\necho \"pg_dump: $(which pg_dump || echo 'NOT FOUND')\"\necho \"mongodump: $(which mongodump || echo 'NOT FOUND')\"\n\n# Wechsle zum Zielverzeichnis\ncd \"${DIR}\" || { echo \"ERROR: Cannot change to ${DIR}\"; exit 1; }\n\n# Entferne alte Installation\necho \"[6/7] Setting up repository...\"\nif [ -d \"${APP_DIR}\" ]; then\n    echo \"Removing old installation...\"\n    rm -rf \"${APP_DIR}\"\nfi\n\n# CRITICAL: Git Repository Setup mit ausführlicher Diagnose\necho \"=================================\"\necho \"GIT REPOSITORY SETUP\"\necho \"=================================\"\necho \"Repository URL: ${GITHUB_REPO}\"\necho \"Branch: ${BRANCH}\"\necho \"Target: ${APP_DIR}\"\n\n# Teste Repository-Zugriff\necho \"Testing repository access...\"\nif ! git ls-remote --heads \"${GITHUB_REPO}\" >/dev/null 2>&1; then\n    echo \"ERROR: Repository is not accessible!\"\n    echo \"Please check:\"\n    echo \"1. Repository URL is correct\"\n    echo \"2. Repository is public\"\n    echo \"3. Repository exists\"\n    echo \"URL: ${GITHUB_REPO}\"\n    exit 1\nfi\necho \"✓ Repository is accessible\"\n\n# Teste Branch-Existenz\necho \"Testing branch existence...\"\nif ! git ls-remote --heads \"${GITHUB_REPO}\" | grep -q \"refs/heads/${BRANCH}$\"; then\n    echo \"ERROR: Branch '${BRANCH}' does not exist!\"\n    echo \"Available branches:\"\n    git ls-remote --heads \"${GITHUB_REPO}\" | sed 's/.*refs\\/heads\\///'\n    exit 1\nfi\necho \"✓ Branch '${BRANCH}' exists\"\n\n# Klone Repository\necho \"Cloning repository...\"\nif ! git clone -b \"${BRANCH}\" \"${GITHUB_REPO}\" \"${APP_DIR}\"; then\n    echo \"ERROR: Git clone failed!\"\n    exit 1\nfi\necho \"✓ Repository cloned successfully\"\n\n# Verifikation nach dem Klonen\necho \"=================================\"\necho \"POST-CLONE VERIFICATION\"\necho \"=================================\"\ncd \"${APP_DIR}\" || { echo \"ERROR: Cannot change to ${APP_DIR}\"; exit 1; }\n\necho \"Current directory: $(pwd)\"\necho \"Directory contents:\"\nls -la\n\n# Prüfe kritische Dateien\necho \"Checking critical files...\"\nif [ ! -f \"package.json\" ]; then\n    echo \"ERROR: package.json not found!\"\n    echo \"Repository contents:\"\n    find . -type f -name \"*.json\" -o -name \"*.js\" | head -10\n    exit 1\nfi\necho \"✓ package.json found\"\n\nif [ ! -f \"server.js\" ]; then\n    echo \"ERROR: server.js not found!\"\n    exit 1\nfi\necho \"✓ server.js found\"\n\n# Validiere package.json\necho \"Validating package.json...\"\nif ! node -e \"JSON.parse(require('fs').readFileSync('package.json', 'utf8'))\"; then\n    echo \"ERROR: package.json is invalid!\"\n    echo \"Content:\"\n    cat package.json\n    exit 1\nfi\necho \"✓ package.json is valid\"\n\n# Installiere Dependencies\necho \"[7/7] Installing Node.js dependencies...\"\nnpm cache clean --force\nif ! npm install --production; then\n    echo \"ERROR: npm install failed!\"\n    echo \"Trying with --legacy-peer-deps...\"\n    if ! npm install --production --legacy-peer-deps; then\n        echo \"ERROR: npm install failed completely!\"\n        exit 1\n    fi\nfi\necho \"✓ Dependencies installed\"\n\n# Erstelle Verzeichnisse\necho \"Creating directories...\"\nmkdir -p backups logs config public\necho \"✓ Directories created\"\n\n# Erstelle config.json\nif [ ! -f \"config.json\" ]; then\n    echo \"Creating config.json...\"\n    cat > config.json << 'EOF'\n{\n  \"server\": {\n    \"port\": 8080,\n    \"host\": \"0.0.0.0\"\n  },\n  \"security\": {\n    \"sessionSecret\": \"change-this-secret-key-in-production\",\n    \"jwtSecret\": \"change-this-jwt-secret-in-production\",\n    \"defaultAdmin\": {\n      \"username\": \"admin\",\n      \"password\": \"admin123\"\n    }\n  },\n  \"backup\": {\n    \"defaultPath\": \"./backups\",\n    \"maxBackups\": 10,\n    \"compression\": true\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"file\": \"./logs/app.log\"\n  },\n  \"updates\": {\n    \"autoUpdate\": true,\n    \"repository\": \"{{GITHUB_REPOSITORY}}\",\n    \"branch\": \"{{GITHUB_BRANCH}}\"\n  }\n}\nEOF\n    echo \"✓ config.json created\"\nfi\n\n# Erstelle update.sh\necho \"Creating update.sh...\"\ncat > update.sh << 'EOF'\n#!/bin/bash\n# Auto-Update Script\n\necho \"🔄 Checking for updates...\"\n\n# Backup current config\nif [ -f \"config.json\" ]; then\n    cp config.json config.json.backup\nfi\n\n# Backup schedules\nif [ -f \"backups/schedules.json\" ]; then\n    cp backups/schedules.json backups/schedules.json.backup\nfi\n\n# Check git repository\nif [ ! -d \".git\" ]; then\n    echo \"❌ Not a git repository\"\n    exit 0\nfi\n\n# Fetch and update\ngit fetch origin\nLOCAL=$(git rev-parse HEAD)\nREMOTE=$(git rev-parse origin/{{GITHUB_BRANCH}})\n\nif [ \"$LOCAL\" = \"$REMOTE\" ]; then\n    echo \"✅ Already up to date\"\nelse\n    echo \"🔄 Updating...\"\n    git reset --hard origin/{{GITHUB_BRANCH}}\n    npm install --production\n    mkdir -p backups logs config public\n    \n    # Restore backups\n    if [ -f \"config.json.backup\" ]; then\n        mv config.json.backup config.json\n    fi\n    if [ -f \"backups/schedules.json.backup\" ]; then\n        mv backups/schedules.json.backup backups/schedules.json\n    fi\n    \n    echo \"✅ Update completed\"\nfi\nEOF\n\nchmod +x update.sh\necho \"✓ update.sh created\"\n\n# Erstelle leere schedules.json\necho \"[]\" > backups/schedules.json\necho \"✓ schedules.json created\"\n\n# Erstelle .gitattributes\necho \"* text=auto\" > .gitattributes\necho \"✓ .gitattributes created\"\n\n# Setze Berechtigungen\nchmod 755 .\nchmod 644 config.json package.json server.js 2>/dev/null || true\nchmod 755 backups logs config public 2>/dev/null || true\necho \"✓ Permissions set\"\n\n# Finale Verifikation\necho \"=================================\"\necho \"FINAL VERIFICATION\"\necho \"=================================\"\necho \"Working Directory: $(pwd)\"\necho \"Git Repository: $(git remote get-url origin)\"\necho \"Git Branch: $(git branch --show-current)\"\necho \"Git Commit: $(git rev-parse --short HEAD)\"\necho \"Node.js: $(node --version)\"\necho \"NPM: $(npm --version)\"\necho \"=================================\"\necho \"CRITICAL FILES:\"\nls -la package.json server.js config.json\necho \"=================================\"\necho \"DIRECTORIES:\"\nls -la backups/ logs/ config/ public/\necho \"=================================\"\n\n# Test application\necho \"Testing application startup...\"\nif timeout 5s node -e \"console.log('App test OK'); require('./server.js')\" 2>/dev/null; then\n    echo \"✓ Application test passed\"\nelse\n    echo \"⚠ Application test timeout (normal during installation)\"\nfi\n\necho \"=================================\"\necho \"🎉 INSTALLATION COMPLETE!\"\necho \"=================================\"\necho \"Repository: ${GITHUB_REPO}\"\necho \"Branch: ${BRANCH}\"\necho \"Target: ${APP_DIR}\"\necho \"Default Login: admin / admin123\"\necho \"⚠️  Change default password after first login!\"\necho \"=================================\"\n\n# Absolute final check\nif [ ! -f \"package.json\" ] || [ ! -f \"server.js\" ]; then\n    echo \"CRITICAL ERROR: Installation incomplete!\"\n    echo \"Missing files after installation!\"\n    exit 1\nfi\n\necho \"✓ All checks passed - installation successful\"",
      "container": "debian:bookworm-slim",
      "entrypoint": "bash"
    }
  },
  "variables": [
    {
      "name": "GitHub Repository",
      "description": "GitHub Repository URL (z.B. https://github.com/username/repo.git)",
      "env_variable": "GITHUB_REPOSITORY",
      "default_value": "https://github.com/DEIN-USERNAME/db-backup-tool.git",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:10",
      "sort": 1,
      "field_type": "text"
    },
    {
      "name": "GitHub Branch",
      "description": "Branch für Updates (normalerweise main oder master)",
      "env_variable": "GITHUB_BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:1",
      "sort": 2,
      "field_type": "text"
    },
    {
      "name": "Auto-Update aktivieren",
      "description": "Automatische Updates bei Serverstart",
      "env_variable": "AUTO_UPDATE",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 3,
      "field_type": "text"
    },
    {
      "name": "Node Environment",
      "description": "Node.js Umgebung (production oder development)",
      "env_variable": "NODE_ENV",
      "default_value": "production",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:production,development",
      "sort": 4,
      "field_type": "text"
    },
    {
      "name": "Default Admin Username",
      "description": "Standard Admin Benutzername",
      "env_variable": "ADMIN_USERNAME",
      "default_value": "admin",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:3|max:20",
      "sort": 5,
      "field_type": "text"
    },
    {
      "name": "Default Admin Password",
      "description": "Standard Admin Passwort (bitte nach dem ersten Login ändern!)",
      "env_variable": "ADMIN_PASSWORD",
      "default_value": "admin123",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:6",
      "sort": 6,
      "field_type": "text"
    },
    {
      "name": "Session Secret",
      "description": "Geheimer Schlüssel für Sessions",
      "env_variable": "SESSION_SECRET",
      "default_value": "change-this-secret-key-in-production",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 7,
      "field_type": "text"
    },
    {
      "name": "JWT Secret",
      "description": "Geheimer Schlüssel für JWT Tokens",
      "env_variable": "JWT_SECRET",
      "default_value": "change-this-jwt-secret-in-production",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 8,
      "field_type": "text"
    },
    {
      "name": "Max Backups",
      "description": "Maximale Anzahl von Backups die gespeichert werden sollen",
      "env_variable": "MAX_BACKUPS",
      "default_value": "10",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:100",
      "sort": 9,
      "field_type": "text"
    },
    {
      "name": "Enable Compression",
      "description": "Backup-Komprimierung aktivieren",
      "env_variable": "ENABLE_COMPRESSION",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 10,
      "field_type": "text"
    }
  ]
}
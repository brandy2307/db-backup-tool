 {
 "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
  "meta": {
    "version": "PTDL_v2",
    "update_url": "https://github.com/brandy2307/db-backup-tool/blob/main/dbtool-egg.json"
  },
  "exported_at": "2024-12-15T16:30:00+00:00",
  "name": "DB Backup Tool (Enhanced SSL Debug)",
  "author": "brandy@example.com",
  "uuid": "db9f372e-01d7-4c9b-a109-e49990d68d46",
  "description": "Sicheres automatisiertes Datenbank-Backup-Tool mit erweiterten SSL-Debugging-Funktionen",
  "features": [
    "eula=false"
  ],
  "docker_images": {
    "ghcr.io/parkervcp/yolks:nodejs_18": "ghcr.io/parkervcp/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "cd /home/container && if [ ! -f \"db-backup-tool/package.json\" ]; then echo \"ERROR: package.json not found. Please reinstall the server.\"; exit 1; fi && cd db-backup-tool && npm start",
  "config": {
    "files": "{\r\n    \"db-backup-tool/config.json\": {\r\n        \"parser\": \"json\",\r\n        \"find\": {\r\n            \"server.port\": \"{{server.build.default.port}}\",\r\n            \"server.httpsPort\": \"{{env.HTTPS_PORT}}\",\r\n            \"server.host\": \"0.0.0.0\",\r\n            \"security.requireHttps\": \"{{env.REQUIRE_HTTPS}}\",\r\n            \"security.enable2FA\": \"{{env.ENABLE_2FA}}\",\r\n            \"security.strongPasswords\": \"{{env.STRONG_PASSWORDS}}\",\r\n            \"security.maxFailedAttempts\": \"{{env.MAX_FAILED_ATTEMPTS}}\",\r\n            \"security.defaultAdmin.username\": \"{{env.ADMIN_USERNAME}}\",\r\n            \"security.defaultAdmin.password\": \"{{env.ADMIN_PASSWORD}}\",\r\n            \"security.sessionSecret\": \"{{env.SESSION_SECRET}}\",\r\n            \"security.jwtSecret\": \"{{env.JWT_SECRET}}\",\r\n            \"ssl.domain\": \"{{env.SSL_DOMAIN}}\",\r\n            \"ssl.email\": \"{{env.SSL_EMAIL}}\",\r\n            \"ssl.method\": \"{{env.SSL_METHOD}}\",\r\n            \"ssl.autoRenewal\": \"{{env.SSL_AUTO_RENEWAL}}\",\r\n            \"ssl.keySize\": \"{{env.SSL_KEY_SIZE}}\",\r\n            \"ssl.certValidity\": \"{{env.SSL_CERT_VALIDITY}}\",\r\n            \"ssl.setupOnStart\": \"{{env.SSL_SETUP_ON_START}}\",\r\n            \"backup.maxBackups\": \"{{env.MAX_BACKUPS}}\",\r\n            \"backup.compression\": \"{{env.ENABLE_COMPRESSION}}\",\r\n            \"gitBackup.enabled\": \"{{env.GIT_BACKUP_ENABLED}}\",\r\n            \"gitBackup.repository\": \"{{env.GIT_BACKUP_REPOSITORY}}\",\r\n            \"gitBackup.username\": \"{{env.GIT_BACKUP_USERNAME}}\",\r\n            \"gitBackup.branch\": \"{{env.GIT_BACKUP_BRANCH}}\",\r\n            \"updates.autoUpdate\": \"{{env.AUTO_UPDATE}}\"\r\n        }\r\n    }\r\n}",
    "startup": "{\r\n    \"done\": \"Server läuft auf\"\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\n# Enhanced Database Backup Tool Installation mit SSL-Debugging\n\nset -e\n\ndeclare -r DIR=\"/mnt/server\"\ndeclare -r APP_DIR=\"${DIR}/db-backup-tool\"\n\n# Fest definiertes Repository\nREPO_URL=\"https://github.com/brandy2307/db-backup-tool.git\"\nREPO_BRANCH=\"main\"\n\necho \"=================================================\"\necho \"DB BACKUP TOOL INSTALLATION (ENHANCED SSL DEBUG)\"\necho \"=================================================\"\necho \"Repository: ${REPO_URL}\"\necho \"Branch: ${REPO_BRANCH}\"\necho \"Target: ${APP_DIR}\"\necho \"Features: Enhanced SSL-Debugging + Docker-Fixed\"\necho \"=================================================\"\n\n# System Dependencies\necho \"[1/8] Installing system dependencies...\"\napt update\napt install -y wget curl gnupg2 software-properties-common git openssl ca-certificates lsb-release netstat-nat\n\n# Node.js\necho \"[2/8] Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | bash -\napt install -y nodejs\n\n# Database Tools\necho \"[3/8] Installing database tools...\"\napt install -y mysql-client || echo \"MySQL client optional\"\napt install -y postgresql-client || echo \"PostgreSQL client optional\"\napt install -y mongodb-database-tools || echo \"MongoDB tools optional\"\n\n# SSL Tools (erweitert für Debugging)\necho \"[4/8] Installing enhanced SSL tools...\"\napt install -y certbot python3-certbot-nginx python3-certbot-apache || echo \"Certbot installation failed - will use self-signed\"\napt install -y openssl ca-certificates\napt install -y net-tools dnsutils || echo \"Network tools optional\"\n\n# Git Setup\necho \"[5/8] Configuring Git...\"\ngit config --global init.defaultBranch main\ngit config --global user.name \"DB Backup Tool\"\ngit config --global user.email \"backup@localhost\"\n\n# Repository Clone\necho \"[6/8] Cloning repository...\"\ncd \"${DIR}\"\nrm -rf \"${APP_DIR}\" 2>/dev/null || true\ngit clone -b \"${REPO_BRANCH}\" \"${REPO_URL}\" \"${APP_DIR}\"\ncd \"${APP_DIR}\"\n\n# Dependencies\necho \"[7/8] Installing dependencies...\"\nnpm cache clean --force\nnpm install --production --no-audit --no-fund\n\n# Directory Setup\necho \"Creating directories...\"\nmkdir -p backups logs config public ssl\nchmod 700 ssl\nchmod 755 backups logs config public\n\nn[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\nx509_extensions = v3_ca\n\n[req_distinguished_name]\nC = DE\nST = NRW\nL = Docker\nO = DB Backup Tool Enhanced\nCN = DOMAIN_PLACEHOLDER\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth, clientAuth\nsubjectAltName = @alt_names\n\n[v3_ca]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth, clientAuth\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = DOMAIN_PLACEHOLDER\nDNS.2 = localhost\nDNS.3 = *.DOMAIN_PLACEHOLDER\nIP.1 = 127.0.0.1\nIP.2 = ::1\nCONFEOF\n    \n    # Domain in Config einsetzen\n    sed -i \"s/DOMAIN_PLACEHOLDER/${SSL_DOMAIN}/g\" ssl/openssl.cnf\n    \n    if [ \"$DEBUG\" = \"true\" ]; then\n        log_debug \"OpenSSL Config erstellt:\"\n        cat ssl/openssl.cnf | while read line; do\n            log_debug \"Config: $line\"\n        done\n    fi\n    \n    # Zertifikat erstellen mit Enhanced KeyUsage\n    log_info \"Führe OpenSSL-Befehl aus...\"\n    if openssl req -x509 -newkey rsa:${SSL_KEY_SIZE} \\\n        -keyout ssl/privkey.pem \\\n        -out ssl/fullchain.pem \\\n        -days ${SSL_CERT_VALIDITY} \\\n        -nodes \\\n        -config ssl/openssl.cnf \\\n        -extensions v3_ca 2>&1 | while read line; do\n            log_debug \"OpenSSL: $line\"\n        done; then\n        log_info \"✅ OpenSSL-Befehl erfolgreich\"\n    else\n        log_error \"❌ OpenSSL-Befehl fehlgeschlagen\"\n        exit 1\n    fi\n    \n    rm -f ssl/openssl.cnf\n    \n    # Validierung\n    if openssl x509 -in ssl/fullchain.pem -text -noout | grep -q \"digitalSignature\"; then\n        log_info \"✅ Enhanced SSL-Zertifikat mit korrekter KeyUsage erstellt\"\n        log_info \"🌐 Browser-Kompatibilität: ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\n    else\n        log_error \"⚠️ KeyUsage möglicherweise nicht optimal\"\n    fi\n    \nelif [ \"${SSL_METHOD}\" = \"letsencrypt\" ]; then\n    log_info \"🌐 Let's Encrypt Setup mit Debug-Informationen...\"\n    \n    # Erweiterte Validierung für Let's Encrypt\n    if [ \"$SSL_DOMAIN\" = \"localhost\" ] || [[ \"$SSL_DOMAIN\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n        log_error \"❌ Let's Encrypt funktioniert nicht mit localhost/IP-Adressen\"\n        log_error \"Domain: $SSL_DOMAIN ist nicht für Let's Encrypt geeignet\"\n        log_error \"Verwende eine echte Domain oder wähle 'selfsigned'\"\n        exit 1\n    fi\n    \n    # DNS-Validierung\n    if command -v nslookup >/dev/null 2>&1; then\n        log_info \"Prüfe DNS-Auflösung für $SSL_DOMAIN...\"\n        if ! nslookup \"$SSL_DOMAIN\" >/dev/null 2>&1; then\n            log_error \"❌ DNS-Auflösung fehlgeschlagen für $SSL_DOMAIN\"\n            log_error \"Let's Encrypt benötigt eine öffentlich auflösbare Domain\"\n            if [ \"$FORCE_DOMAIN_VALIDATION\" != \"true\" ]; then\n                log_error \"Setze FORCE_DOMAIN_VALIDATION=true um fortzufahren\"\n                exit 1\n            fi\n        else\n            log_info \"✅ DNS-Auflösung erfolgreich\"\n        fi\n    fi\n    \n    # Port-Verfügbarkeit prüfen\n    log_info \"Prüfe Port $LETS_ENCRYPT_PORT für Let's Encrypt...\"\n    if command -v netstat >/dev/null 2>&1; then\n        if netstat -tlnp 2>/dev/null | grep -q \":$LETS_ENCRYPT_PORT \"; then\n            log_error \"❌ Port $LETS_ENCRYPT_PORT ist belegt\"\n            log_error \"Let's Encrypt benötigt Port $LETS_ENCRYPT_PORT\"\n            exit 1\n        else\n            log_info \"✅ Port $LETS_ENCRYPT_PORT ist verfügbar\"\n        fi\n    fi\n    \n    # Certbot Installation prüfen\n    if ! command -v certbot >/dev/null 2>&1; then\n        log_error \"❌ Certbot nicht gefunden\"\n        log_error \"Let's Encrypt benötigt Certbot\"\n        exit 1\n    fi\n    \n    log_info \"Führe Certbot aus...\"\n    certbot certonly \\\n        --standalone \\\n        --non-interactive \\\n        --agree-tos \\\n        --email \"${SSL_EMAIL}\" \\\n        --domains \"${SSL_DOMAIN}\" \\\n        --key-type rsa \\\n        --rsa-key-size ${SSL_KEY_SIZE} \\\n        --preferred-challenges http \\\n        --http-01-port ${LETS_ENCRYPT_PORT} 2>&1 | while read line; do\n            log_debug \"Certbot: $line\"\n            if echo \"$line\" | grep -E \"(Successfully|Congratulations)\" >/dev/null; then\n                log_info \"$line\"\n            elif echo \"$line\" | grep -E \"(Error|Failed)\" >/dev/null; then\n                log_error \"$line\"\n            fi\n        done\n    \n    # Zertifikate kopieren\n    if [ -d \"/etc/letsencrypt/live/${SSL_DOMAIN}\" ]; then\n        cp \"/etc/letsencrypt/live/${SSL_DOMAIN}/fullchain.pem\" ssl/fullchain.pem\n        cp \"/etc/letsencrypt/live/${SSL_DOMAIN}/privkey.pem\" ssl/privkey.pem\n        log_info \"✅ Let's Encrypt Zertifikat erfolgreich kopiert\"\n    else\n        log_error \"❌ Let's Encrypt Zertifikat-Verzeichnis nicht gefunden\"\n        exit 1\n    fi\n    \nelif [ \"${SSL_METHOD}\" = \"cloudflare\" ]; then\n    log_info \"☁️ Cloudflare Origin Certificate Setup...\"\n    \n    if [ -z \"${CLOUDFLARE_API_TOKEN}\" ]; then\n        log_error \"❌ CLOUDFLARE_API_TOKEN ist erforderlich\"\n        log_error \"Setze die Umgebungsvariable CLOUDFLARE_API_TOKEN\"\n        exit 1\n    fi\n    \n    log_debug \"Cloudflare Token verfügbar (${#CLOUDFLARE_API_TOKEN} Zeichen)\"\n    \n    # Hier würde die vollständige Cloudflare-Implementierung stehen\n    log_error \"❌ Cloudflare-Setup in Docker noch nicht vollständig implementiert\"\n    log_error \"Verwende 'selfsigned' als Alternative\"\n    exit 1\n    \nelse\n    log_error \"❌ Unbekannte SSL-Methode: ${SSL_METHOD}\"\n    log_error \"Unterstützte Methoden: selfsigned, letsencrypt, cloudflare\"\n    exit 1\nfi\n\n# Berechtigungen setzen\nchmod 644 ssl/fullchain.pem 2>/dev/null || true\nchmod 600 ssl/privkey.pem 2>/dev/null || true\n\n# Finale Validierung\nif openssl x509 -in ssl/fullchain.pem -text -noout >/dev/null 2>&1; then\n    log_info \"✅ SSL-Zertifikat erfolgreich validiert\"\n    \n    if [ \"$DEBUG\" = \"true\" ]; then\n        log_debug \"Zertifikat-Details:\"\n        openssl x509 -in ssl/fullchain.pem -subject -dates -noout 2>/dev/null | while read line; do\n            log_debug \"Cert: $line\"\n        done\n    fi\n    \n    # KeyUsage-Check für Browser-Kompatibilität\n    if openssl x509 -in ssl/fullchain.pem -text -noout | grep -q \"digitalSignature\"; then\n        log_info \"🌐 Browser-Kompatibilität: ✅ ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\n    else\n        log_error \"⚠️ Browser-Kompatibilität möglicherweise eingeschränkt\"\n    fi\nelse\n    log_error \"❌ SSL-Zertifikat ungültig\"\n    exit 1\nfi\n\nlog_info \"🎉 Enhanced SSL-Setup abgeschlossen!\"\nSSLEOF\n\n# SSL-Setup ausführbar machen\nchmod +x ./ssl-setup-simple.sh\n\n# SSL-Setup ausführen wenn aktiviert\nif [ \"${SSL_SETUP_ON_START:-true}\" = \"true\" ] && [ \"${REQUIRE_HTTPS:-false}\" = \"true\" ]; then\n    echo \"🔐 Führe Enhanced SSL-Setup mit vollständigem Debugging aus...\"\n    \n    # Debug-Variablen für SSL-Setup setzen\n    export SSL_DEBUG=\"${SSL_DEBUG:-false}\"\n    export SSL_VERBOSE=\"${SSL_VERBOSE:-false}\"\n    export LETS_ENCRYPT_PORT=\"${LETS_ENCRYPT_PORT:-80}\"\n    export FORCE_DOMAIN_VALIDATION=\"${FORCE_DOMAIN_VALIDATION:-false}\"\n    \n    echo \"🔧 SSL-Setup Konfiguration:\"\n    echo \"   SSL_METHOD: ${SSL_METHOD}\"\n    echo \"   SSL_DOMAIN: ${SSL_DOMAIN}\"\n    echo \"   SSL_EMAIL: ${SSL_EMAIL}\"\n    echo \"   SSL_DEBUG: ${SSL_DEBUG}\"\n    echo \"   SSL_VERBOSE: ${SSL_VERBOSE}\"\n    echo \"   LETS_ENCRYPT_PORT: ${LETS_ENCRYPT_PORT}\"\n    echo \"   FORCE_DOMAIN_VALIDATION: ${FORCE_DOMAIN_VALIDATION}\"\n    echo \"\"\n    \n    if ./ssl-setup-simple.sh; then\n        echo \"✅ Enhanced SSL-Setup erfolgreich\"\n        if [ -f \"ssl/fullchain.pem\" ] && [ -f \"ssl/privkey.pem\" ]; then\n            echo \"🔐 HTTPS-Zertifikate erstellt\"\n            echo \"🌐 Enhanced Browser-Kompatibilität aktiviert\"\n            echo \"🔍 Debug-Logs verfügbar in: ssl/ssl-debug.log\"\n            \n            # Zertifikat-Details anzeigen wenn Debug aktiv\n            if [ \"${SSL_DEBUG}\" = \"true\" ]; then\n                echo \"\"\n                echo \"📋 ZERTIFIKAT-ZUSAMMENFASSUNG:\"\n                cert_subject=$(openssl x509 -in ssl/fullchain.pem -subject -noout 2>/dev/null | sed 's/subject=//' || echo \"Unbekannt\")\n                cert_expiry=$(openssl x509 -in ssl/fullchain.pem -enddate -noout 2>/dev/null | sed 's/notAfter=//' || echo \"Unbekannt\")\n                cert_issuer=$(openssl x509 -in ssl/fullchain.pem -issuer -noout 2>/dev/null | sed 's/issuer=//' || echo \"Unbekannt\")\n                echo \"   Subject: $cert_subject\"\n                echo \"   Issuer: $cert_issuer\"\n                echo \"   Läuft ab: $cert_expiry\"\n                \n                # KeyUsage-Check\n                if openssl x509 -in ssl/fullchain.pem -text -noout | grep -q \"digitalSignature\"; then\n                    echo \"   KeyUsage: ✅ Browser-kompatibel (digitalSignature, keyEncipherment)\"\n                    echo \"   Status: ✅ ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\n                else\n                    echo \"   KeyUsage: ⚠️ Möglicherweise eingeschränkt\"\n                fi\n                \n                # Debug-Log Statistiken\n                if [ -f \"ssl/ssl-debug.log\" ]; then\n                    log_lines=$(wc -l < ssl/ssl-debug.log 2>/dev/null || echo \"0\")\n                    log_size=$(stat -c%s ssl/ssl-debug.log 2>/dev/null || echo \"0\")\n                    echo \"   Debug-Log: $log_lines Zeilen, $log_size Bytes\"\n                fi\n            fi\n        fi\n    else\n        ssl_exit_code=$?\n        echo \"⚠️ SSL-Setup fehlgeschlagen (Exit Code: $ssl_exit_code)\"\n        echo \"🔍 Prüfe ssl/ssl-debug.log für Details\"\n        \n        # Bei Debugging: Letzte Log-Zeilen anzeigen\n        if [ \"${SSL_DEBUG}\" = \"true\" ] && [ -f \"ssl/ssl-debug.log\" ]; then\n            echo \"\"\n            echo \"📋 LETZTE DEBUG-LOG EINTRÄGE:\"\n            tail -10 ssl/ssl-debug.log 2>/dev/null || echo \"Keine Debug-Logs verfügbar\"\n        fi\n        \n        echo \"\"\n        echo \"💡 TROUBLESHOOTING-HINWEISE:\"\n        if [ \"${SSL_METHOD}\" = \"letsencrypt\" ]; then\n            echo \"   Let's Encrypt Probleme:\"\n            echo \"   • Domain muss öffentlich erreichbar sein: ${SSL_DOMAIN}\"\n            echo \"   • Port ${LETS_ENCRYPT_PORT} muss verfügbar sein\"\n            echo \"   • DNS-Auflösung muss funktionieren\"\n            echo \"   • Verwende SSL_METHOD=selfsigned für localhost/private Domains\"\n        fi\n        echo \"   • Setze SSL_DEBUG=true für detaillierte Logs\"\n        echo \"   • Prüfe Container-Logs nach SSL-Setup Fehlern\"\n        echo \"   • Verwende Self-Signed für interne/Test-Umgebungen\"\n    fi\nelse\n    echo \"ℹ️ Enhanced SSL-Setup übersprungen\"\n    echo \"   SSL_SETUP_ON_START: ${SSL_SETUP_ON_START:-true}\"\n    echo \"   REQUIRE_HTTPS: ${REQUIRE_HTTPS:-false}\"\n    if [ \"${REQUIRE_HTTPS:-false}\" = \"false\" ]; then\n        echo \"   💡 Setze REQUIRE_HTTPS=true um SSL zu aktivieren\"\n    fi\nfi\n\n# Finale Berechtigungen\nchmod 755 .\nchmod 644 *.json *.js *.md 2>/dev/null || true\nchmod +x *.sh 2>/dev/null || true\n\n# Grundlegende Dateien erstellen\ntouch logs/security.log\necho \"[]\" > backups/schedules.json 2>/dev/null || true\necho \"* text=auto\" > .gitattributes 2>/dev/null || true\n\n# Validierung\necho \"Validiere Installation...\"\nif node -e \"JSON.parse(require('fs').readFileSync('package.json', 'utf8'))\" 2>/dev/null; then\n    echo \"✅ package.json gültig\"\nelse\n    echo \"❌ package.json ungültig\"\n    exit 1\nfi\n\necho \"=================================================\"\necho \"🎉 ENHANCED INSTALLATION ERFOLGREICH!\"\necho \"=================================================\"\necho \"✅ Repository: ${REPO_URL}\"\necho \"✅ Branch: ${REPO_BRANCH}\"\necho \"✅ Node.js: $(node --version 2>/dev/null || echo 'Unknown')\"\necho \"✅ NPM: $(npm --version 2>/dev/null || echo 'Unknown')\"\necho \"✅ Enhanced SSL: Mit erweiterten Debugging\"\necho \"✅ Browser Fix: ERR_SSL_KEY_USAGE_INCOMPATIBLE behoben\"\necho \"✅ Debug-Support: SSL_DEBUG, SSL_VERBOSE verfügbar\"\necho \"✅ Port-Konfiguration: LETS_ENCRYPT_PORT konfigurierbar\"\n\nif [ -f \"ssl/fullchain.pem\" ] && [ -f \"ssl/privkey.pem\" ]; then\n    echo \"🔐 SSL Status: Zertifikate verfügbar\"\nelse\n    echo \"ℹ️ SSL Status: Wird beim ersten Start erstellt\"\nfi\n\necho \"=================================================\"\necho \"🚀 SERVER BEREIT MIT ENHANCED SSL-DEBUGGING!\"\necho \"🔧 Erweiterte SSL-Konfiguration über ENV-Variablen\"\necho \"🔍 Debug-Logs: ssl/ssl-debug.log\"\necho \"=================================================\"",
      "container": "debian:bookworm-slim",
      "entrypoint": "bash"
    }
  },
  "variables": [
    {
      "name": "Auto-Update aktivieren",
      "description": "Automatische Updates bei Serverstart vom offiziellen Repository",
      "env_variable": "AUTO_UPDATE",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 1,
      "field_type": "text"
    },
    {
      "name": "Node Environment",
      "description": "Node.js Umgebung (production empfohlen)",
      "env_variable": "NODE_ENV",
      "default_value": "production",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:production,development",
      "sort": 2,
      "field_type": "text"
    },
    {
      "name": "Admin Benutzername",
      "description": "Standard Admin Benutzername für erste Anmeldung",
      "env_variable": "ADMIN_USERNAME",
      "default_value": "admin",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:3|max:20",
      "sort": 3,
      "field_type": "text"
    },
    {
      "name": "Admin Passwort",
      "description": "Standard Admin Passwort (WICHTIG: Nach dem ersten Login ändern!)",
      "env_variable": "ADMIN_PASSWORD",
      "default_value": "admin123",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:6",
      "sort": 4,
      "field_type": "text"
    },
    {
      "name": "Session Secret",
      "description": "Geheimer Schlüssel für Sessions (mindestens 32 Zeichen)",
      "env_variable": "SESSION_SECRET",
      "default_value": "db-backup-session-secret-change-in-production-32chars-min",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 5,
      "field_type": "text"
    },
    {
      "name": "JWT Secret",
      "description": "Geheimer Schlüssel für JWT Tokens (mindestens 32 Zeichen)",
      "env_variable": "JWT_SECRET",
      "default_value": "db-backup-jwt-secret-change-in-production-32chars-minimum",
      "user_viewable": false,
      "user_editable": true,
      "rules": "required|string|min:32",
      "sort": 6,
      "field_type": "text"
    },
    {
      "name": "Maximale Backups",
      "description": "Maximale Anzahl von Backups die gespeichert werden",
      "env_variable": "MAX_BACKUPS",
      "default_value": "10",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:100",
      "sort": 7,
      "field_type": "text"
    },
    {
      "name": "Backup-Komprimierung",
      "description": "Aktiviert Komprimierung für Backups",
      "env_variable": "ENABLE_COMPRESSION",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 8,
      "field_type": "text"
    },
    {
      "name": "HTTPS aktivieren",
      "description": "Erzwingt HTTPS für die Anwendung (SSL-Zertifikat erforderlich)",
      "env_variable": "REQUIRE_HTTPS",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 9,
      "field_type": "text"
    },
    {
      "name": "HTTPS Port",
      "description": "Port für den HTTPS-Server",
      "env_variable": "HTTPS_PORT",
      "default_value": "8443",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:65535",
      "sort": 10,
      "field_type": "text"
    },
    {
      "name": "SSL-Methode",
      "description": "SSL-Zertifikat Methode: selfsigned (sicher), letsencrypt (echte Domain), cloudflare (Cloudflare Origin)",
      "env_variable": "SSL_METHOD",
      "default_value": "selfsigned",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:selfsigned,letsencrypt,cloudflare,manual",
      "sort": 11,
      "field_type": "text"
    },
    {
      "name": "SSL Domain",
      "description": "Domain für SSL-Zertifikat (für Let's Encrypt: echte Domain erforderlich!)",
      "env_variable": "SSL_DOMAIN",
      "default_value": "localhost",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:3|max:255",
      "sort": 12,
      "field_type": "text"
    },
    {
      "name": "SSL Email",
      "description": "Email-Adresse für SSL-Zertifikat (erforderlich für Let's Encrypt)",
      "env_variable": "SSL_EMAIL",
      "default_value": "admin@localhost",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|min:5|max:255",
      "sort": 13,
      "field_type": "text"
    },
    {
      "name": "SSL Auto-Renewal",
      "description": "Automatische Erneuerung von SSL-Zertifikaten",
      "env_variable": "SSL_AUTO_RENEWAL",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 14,
      "field_type": "text"
    },
    {
      "name": "SSL Setup beim Start",
      "description": "Führt SSL-Setup automatisch beim Server-Start aus",
      "env_variable": "SSL_SETUP_ON_START",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 15,
      "field_type": "text"
    },
    {
      "name": "SSL Key-Größe",
      "description": "RSA Schlüssel-Größe in Bits (4096 = sehr sicher, 2048 = Standard)",
      "env_variable": "SSL_KEY_SIZE",
      "default_value": "4096",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|in:2048,4096",
      "sort": 16,
      "field_type": "text"
    },
    {
      "name": "SSL Zertifikat-Gültigkeit",
      "description": "Gültigkeit des SSL-Zertifikats in Tagen (nur für Self-Signed)",
      "env_variable": "SSL_CERT_VALIDITY",
      "default_value": "365",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:30|max:3650",
      "sort": 17,
      "field_type": "text"
    },
    {
      "name": "🔍 SSL Debug-Modus",
      "description": "Aktiviert erweiterte Debug-Ausgaben für SSL-Setup (Troubleshooting)",
      "env_variable": "SSL_DEBUG",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 18,
      "field_type": "text"
    },
    {
      "name": "🔍 SSL Verbose-Modus",
      "description": "Aktiviert detaillierte Ausgaben für SSL-Setup",
      "env_variable": "SSL_VERBOSE",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 19,
      "field_type": "text"
    },
    {
      "name": "🌐 Let's Encrypt Port",
      "description": "Port für Let's Encrypt HTTP-Challenge (Standard: 80, Docker oft: 8080)",
      "env_variable": "LETS_ENCRYPT_PORT",
      "default_value": "80",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:65535",
      "sort": 20,
      "field_type": "text"
    },
    {
      "name": "🔍 Domain-Validierung erzwingen",
      "description": "Erzwingt Domain-Validierung auch bei DNS-Fehlern (nur für Debugging)",
      "env_variable": "FORCE_DOMAIN_VALIDATION",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 21,
      "field_type": "text"
    },
    {
      "name": "Zwei-Faktor-Authentifizierung",
      "description": "Aktiviert 2FA für zusätzliche Sicherheit",
      "env_variable": "ENABLE_2FA",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 22,
      "field_type": "text"
    },
    {
      "name": "Starke Passwörter erzwingen",
      "description": "Erzwingt starke Passwörter (min. 12 Zeichen, Groß-/Kleinbuchstaben, Zahlen, Sonderzeichen)",
      "env_variable": "STRONG_PASSWORDS",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 23,
      "field_type": "text"
    },
    {
      "name": "Max. Login-Fehlversuche",
      "description": "Maximale Anzahl fehlgeschlagener Login-Versuche vor Sperrung",
      "env_variable": "MAX_FAILED_ATTEMPTS",
      "default_value": "5",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|integer|min:1|max:20",
      "sort": 24,
      "field_type": "text"
    },
    {
      "name": "Git Backup aktivieren",
      "description": "Automatisches Pushen von Backups zu Git Repository",
      "env_variable": "GIT_BACKUP_ENABLED",
      "default_value": "false",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:true,false",
      "sort": 25,
      "field_type": "text"
    },
    {
      "name": "Git Repository URL",
      "description": "HTTPS URL des Git Repositories für Backups",
      "env_variable": "GIT_BACKUP_REPOSITORY",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:500",
      "sort": 26,
      "field_type": "text"
    },
    {
      "name": "Git Benutzername",
      "description": "Git Benutzername für Repository-Zugriff",
      "env_variable": "GIT_BACKUP_USERNAME",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:100",
      "sort": 27,
      "field_type": "text"
    },
    {
      "name": "Git Access Token",
      "description": "Personal Access Token oder App Password für Git Repository",
      "env_variable": "GIT_BACKUP_TOKEN",
      "default_value": "",
      "user_viewable": false,
      "user_editable": true,
      "rules": "nullable|string|max:200",
      "sort": 28,
      "field_type": "text"
    },
    {
      "name": "Git Branch",
      "description": "Git Branch für Backups",
      "env_variable": "GIT_BACKUP_BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:50",
      "sort": 29,
      "field_type": "text"
    },
    {
      "name": "Cloudflare API Token",
      "description": "Cloudflare API Token für Cloudflare Origin Certificates (nur bei SSL_METHOD=cloudflare)",
      "env_variable": "CLOUDFLARE_API_TOKEN",
      "default_value": "",
      "user_viewable": false,
      "user_editable": true,
      "rules": "nullable|string|max:200",
      "sort": 30,
      "field_type": "text"
    }
  ]
}